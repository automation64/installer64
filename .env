#!/bin/sh
#
# Project development environment variables
#
# * Use along with .local and .secrets
# * Template version: 2.3.0
#

# Base file and directory names for building paths
DEV_BASE_BUILD='build'
export DEV_BASE_BUILD
DEV_BASE_TEST='test'
export DEV_BASE_TEST
DEV_BASE_SRC='src'
export DEV_BASE_SRC

# Base path for builds
DEV_BUILD="${DEV_ROOT}/${DEV_BASE_BUILD}"
export DEV_BUILD

# Source files
DEV_SRC="${DEV_ROOT}/${DEV_BASE_SRC}"
export DEV_SRC

# Test files
DEV_TEST="${DEV_ROOT}/${DEV_BASE_TEST}"
export DEV_TEST

# Dev/Test scripts
DEV_BIN="${DEV_ROOT}/bin"
export DEV_BIN

# Dev/Test libs
DEV_LIB="${DEV_ROOT}/lib"
export DEV_LIB

# Base path for documentation
DEV_DOCS="${DEV_ROOT}/docs"
export DEV_DOCS

# Temporary data location
DEV_TMP="${DEV_ROOT}/.tmp"
export DEV_TMP

# Variable data location
DEV_VAR="${DEV_ROOT}/.var"
export DEV_VAR

#
# CICD components
#

# Lib / Installer64 / Source
DEV_CICD_INSTALLER64_URL='https://raw.githubusercontent.com/automation64/installer64/main/src/install-installer64'
export DEV_CICD_INSTALLER64_URL

# Lib / Installer64 / Target
DEV_CICD_INSTALLER64_TARGET="${DEV_LIB}/inst64"
export DEV_CICD_INSTALLER64_BIN

# Lib / BashLib64 / Deployment
DEV_CICD_BASHLIB64="${DEV_LIB}/bl64"
export DEV_CICD_BASHLIB64

# Lib / TestmanSH / Source
DEV_CICD_TESTMANSH_REPO='https://raw.githubusercontent.com/automation64/testmansh/main/testmansh'
export DEV_CICD_BASHLIB64

# Lib / TestmanSH / Target
DEV_CICD_TESTMANSH="${DEV_LIB}/testmansh"
export DEV_CICD_TESTMANSH

# Repo / Origin repo name
DEV_CICD_REPO_ORIGIN_NAME='origin'
export DEV_CICD_REPO_ORIGIN_NAME

# Repo / Upstream repo name
DEV_CICD_REPO_UPSTREAM_NAME='upstream'
export DEV_CICD_REPO_UPSTREAM_NAME

# Repo / Main branch name
DEV_CICD_BRANCH_MAIN='main'
export DEV_CICD_BRANCH_MAIN

# Repo / Changelog
DEV_CICD_REPO_CHANGELOG='CHANGELOG.md'
export DEV_CICD_REPO_CHANGELOG

# Lint / Bash / Configuration
DEV_CICD_LINT_BASH_CFG="${DEV_ROOT}/.shellcheckrc"
export DEV_CICD_LINT_BASH_CFG

# Lint / Bash / Target
DEV_CICD_LINT_BASH_TARGET='src'
export DEV_CICD_LINT_BASH_TARGET

# Pack / Package name
DEV_PACK_NAME_BUNDLE='installer64-scripts.tgz'
export DEV_PACK_NAME_BUNDLE
DEV_PACK_NAME_INSTALLER='install-installer64'
export DEV_PACK_NAME_INSTALLER

# Pack / Packages destination
DEV_PACK_STORE="${DEV_BUILD}/pack"
export DEV_PACK_STORE

# Lab / Installer / Container Registry
DEV_CICD_LAB_REGISTRY="ghcr.io/automation64"
export DEV_CICD_LAB_REGISTRY

# Lab / Installer / Default image
DEV_CICD_LAB_IMAGE='base/alpine-3-base:latest'
export DEV_CICD_LAB_IMAGE

# Release / GitHub / Repository Owner
DEV_CICD_RELEASE_REPO_OWNER="automation64"
export DEV_CICD_RELEASE_REPO_OWNER

# Release / GitHub / Repository Name
DEV_CICD_RELEASE_REPO_NAME="installer64"
export DEV_CICD_RELEASE_REPO_NAME

#
# Project specific variables
#

# Test / Installer / Cases
DEV_CICD_TEST_CASES="bash"
export DEV_CICD_TEST_CASES

# Test / Installer / Container Registry
DEV_CICD_TEST_REGISTRY="ghcr.io/automation64/bash-test"
export DEV_CICD_TEST_REGISTRY

# Test / Installer / Environment : must remain OFF
INST64_TEST_ENVIRONMENT='OFF'
export INST64_TEST_ENVIRONMENT

# Test / Installer / Container
DEV_TEST_CONTAINER_UB='ubuntu-22.4-bash-test'
export DEV_TEST_CONTAINER_UB

DEV_TEST_CONTAINER_OL='oraclelinux-9-bash-test'
export DEV_TEST_CONTAINER_OL

DEV_TEST_CONTAINER_ALP='alpine-3-bash-test'
export DEV_TEST_CONTAINER_ALP

DEV_TEST_LIST_UB=''
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-ansible_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-ansiblelint_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-argocdcli_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-awscli_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-azurecli_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-bashlib64_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-cosign_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-crane_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-dockle_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-fluxcdcli_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-gcc_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-gcloud_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-ghcli_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-gitui_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-go_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-hadolint_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-helm_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-helm_02"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-helm-chart-releaser_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-helm-chart-tester_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-hugo_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-installer64_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-istioctl_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-jekyll_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-jenkinsxcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kind_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-krew_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-kubeconform_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-kubectl_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-kubectl_02"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-kubelinter_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-kubescape_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-lazydocker_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-minikube_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-minikube_02"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-mkdocs_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-nodejs_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-precommit_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-python_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-ruby_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-shellcheck_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-shellcheck_02"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-shfmt_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-yamllint_01"
DEV_TEST_LIST_UB="${DEV_TEST_LIST_UB} install-yq_01"
export DEV_TEST_LIST_UB

DEV_TEST_LIST_OL=''
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-ansible_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-argocdcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-awscli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-azurecli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-bashlib64_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-cosign_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-crane_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-dockercli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-dockle_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-fluxcdcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-gcloud_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-ghcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-gitui_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-hadolint_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-helm_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-helm_02"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-helm-chart-releaser_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-helm-chart-tester_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-installer64_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-istioctl_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-jenkinsxcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-k9s_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kind_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-krew_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-ksniff_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kubectl_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kubectl_02"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kubelinter_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kubepug_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kubescape_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-kubeseal_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-lazydocker_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-lnav_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-minikube_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-minikube_02"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-mongodbcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-mysql_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-pluto_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-podman_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-popeye_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-psqlcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-stern_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-terraform_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-tflint_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-trivy_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-vaultcli_01"
DEV_TEST_LIST_OL="${DEV_TEST_LIST_OL} install-yq_01"
export DEV_TEST_LIST_OL

DEV_TEST_LIST_ALP=''
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-bashlib64_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-batscore_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-cosign_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-crane_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-dockle_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-hadolint_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-helm_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-helm_02"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-helm-chart-tester_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-installer64_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-kubectl_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-kubectl_02"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-kubelinter_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-lazydocker_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-mkdocs_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-python_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-shellcheck_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-shellcheck_02"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-shfmt_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-terraform_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-tflint_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-tfsec_01"
DEV_TEST_LIST_ALP="${DEV_TEST_LIST_ALP} install-yq_01"
export DEV_TEST_LIST_ALP
