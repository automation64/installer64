#!/usr/bin/env bash
# Template: 2.0.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 2.0.1
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
export INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
# Enable debugging? Set to YES to enable
export INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
export INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
export INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Base path for 3rd party applications
export INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
# Location for temporary files
export INST64_TMP="${INST64_TMP:-/tmp}"

# shellcheck source-path=SCRIPTDIR/../lib/bl64
source "${INST64_BASHLIB64}/bashlib64.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Installation method
export INST64_PYTHON_METHOD="${INST64_PYTHON_METHOD:-NATIVE}"
# Enable development packages?
export INST64_PYTHON_DEVELOPMENT="${INST64_PYTHON_DEVELOPMENT:-$BL64_VAR_OFF}"

export INST64_PYTHON_PACKAGES=''
export INST64_PYTHON_CLI_NAME='python3'

#
# Functions
#

function inst64_python_install_os_packages() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'deploy packages'
  # shellcheck disable=SC2086
  bl64_pkg_deploy $INST64_PYTHON_PACKAGES ||
    return $?
  if bl64_os_match "${BL64_OS_ALP}-3"; then
    bl64_msg_show_warning 'pipx native package not available. PIPX installation method will not be available.'
  fi
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_python_install() {
  bl64_dbg_app_show_function
  inst64_python_select_packages || return $?
  if [[ "$INST64_PYTHON_METHOD" == 'NATIVE' ]]; then
    inst64_python_install_os_packages
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_python_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_PYTHON_METHOD" == 'NATIVE' ]]; then
    if bl64_os_match "${BL64_OS_UB}-22"; then
      INST64_PYTHON_PACKAGES='python3 python3-pip python3-venv pipx'
      bl64_lib_flag_is_enabled "$INST64_PYTHON_DEVELOPMENT" &&
        INST64_PYTHON_PACKAGES="${INST64_PYTHON_PACKAGES} python3-dev build-essential"
    elif bl64_os_match "${BL64_OS_ALP}-3"; then
      INST64_PYTHON_PACKAGES='python3 py3-pip py3-virtualenv'
      bl64_lib_flag_is_enabled "$BL64_VAR_ON" &&
        INST64_PYTHON_PACKAGES="${INST64_PYTHON_PACKAGES} python3-dev py3-setuptools"
    fi
  fi
  [[ -z "$INST64_PYTHON_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_python_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  bl64_pkg_setup
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_python_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "/usr/bin/${INST64_PYTHON_CLI_NAME}" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_python_initialize() {
  bl64_dbg_app_show_function
  bl64_os_check_version \
    "${BL64_OS_UB}-22" \
    "${BL64_OS_ALP}-3" &&
    bl64_check_privilege_root &&
    bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_PYTHON_METHOD' \
      "$INST64_PYTHON_METHOD" \
      'NATIVE'
}

#
# Main
#

declare inst64_python_installer_description='Install application: Python'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_python_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_python_initialize &&
  inst64_python_prepare &&
  inst64_python_install &&
  inst64_python_verify
bl64_msg_show_batch_finish $? "$inst64_python_installer_description"
