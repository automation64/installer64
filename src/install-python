#!/usr/bin/env bash
# Template: install-bl64-native-1.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
[[ ! -d "$INST64_BASHLIB64" && -d "${HOME}/at64" ]] && INST64_BASHLIB64="${HOME}/at64"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo "Fatal: unable to load BashLib64 libraries (${INST64_BASHLIB64})." && exit 1; }
# shellcheck source-path=src disable=SC2015
source "${BL64_SCRIPT_PATH}/lib-bl64" ||
  { echo 'Fatal: unable to load Installer64 libraries.' && exit 1; }

#
# Globals
#

# Installation method
declare INST64_PYTHON_METHOD="${INST64_PYTHON_METHOD:-NATIVE}"
# Installation destination
declare INST64_PYTHON_TARGET="${INST64_PYTHON_TARGET:-}"
# Hardware architecture
declare INST64_PYTHON_PLATFORM="${INST64_PYTHON_PLATFORM:-}"
# Application version
declare INST64_PYTHON_VERSION="${INST64_PYTHON_VERSION:-latest}"
# Enable development packages?
declare INST64_PYTHON_DEVELOPMENT="${INST64_PYTHON_DEVELOPMENT:-NO}"

# App information
INST64_APP_NAME='python'
INST64_APP_ID='PYTHON'
INST64_APP_FULL_NAME='Python V3'
# CLI information
INST64_CLI_NAME='python3'

#
# Functions
#

function inst64_python_install_native() {
  bl64_dbg_app_show_function
  # shellcheck disable=SC2086
  bl64_pkg_deploy $INST64_PKG_MAIN
}

function inst64_python_prepare() {
  bl64_dbg_app_show_function
  inst64_lib_step_prepare || return 0
}

function inst64_python_install() {
  bl64_dbg_app_show_function
  inst64_lib_step_install || return 0
  if [[ "$INST64_PYTHON_METHOD" == 'NATIVE' ]]; then
    inst64_python_install_native
  fi
}

function inst64_python_setup() {
  bl64_dbg_app_show_function
  inst64_lib_step_setup || return 0
}

function inst64_python_verify() {
  bl64_dbg_app_show_function
  inst64_lib_step_verify || return 0
  "${INST64_CLI_PATH}/${INST64_CLI_NAME}" --version
}

function inst64_python_select_method() {
  bl64_dbg_app_show_function
  inst64_lib_app_check_method \
    'AUTO' \
    'NATIVE' ||
    return $?
  if [[ "$INST64_PYTHON_METHOD" == 'AUTO' ]]; then
    INST64_PYTHON_METHOD='NATIVE'
  fi
}

function inst64_python_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_PYTHON_METHOD" == 'NATIVE' ]]; then
    INST64_CLI_PATH='/usr/bin'
  fi
  return 0
}

function inst64_python_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_PYTHON_METHOD" == 'NATIVE' ]]; then
    # shellcheck disable=SC2249
    case "$BL64_OS_FLAVOR" in
    "$BL64_OS_FLAVOR_ALPINE")
      bl64_lib_flag_is_enabled "$INST64_PYTHON_DEVELOPMENT" &&
        INST64_PKG_DEV='python3-dev py3-setuptools'
      INST64_PKG_MAIN='python3 py3-pip py3-virtualenv'
      ;;
    "$BL64_OS_FLAVOR_DEBIAN")
      bl64_lib_flag_is_enabled "$INST64_PYTHON_DEVELOPMENT" &&
        INST64_PKG_DEV='python3-dev build-essential'
      INST64_PKG_MAIN='python3 python3-pip python3-venv'
      ;;
    "$BL64_OS_FLAVOR_FEDORA")
      bl64_lib_flag_is_enabled "$INST64_PYTHON_DEVELOPMENT" &&
        INST64_PKG_DEV='X_OS_DEV_PACKAGE_LIST_X'
      INST64_PKG_MAIN='python3 python3-pip'
      ;;
    "$BL64_OS_FLAVOR_REDHAT")
      bl64_lib_flag_is_enabled "$INST64_PYTHON_DEVELOPMENT" &&
        INST64_PKG_DEV='python3-setuptools'
      INST64_PKG_MAIN='python3 python3-pip'
      ;;
    "$BL64_OS_FLAVOR_SUSE")
      bl64_lib_flag_is_enabled "$INST64_PYTHON_DEVELOPMENT" &&
        INST64_PKG_DEV='python3-devel'
      INST64_PKG_MAIN='python3 python3-pip python3-virtualenv'
      ;;
    esac
    INST64_PKG_MAIN+=" ${INST64_PKG_DEV}"
  fi
  inst64_lib_package_check_definition
}

function inst64_python_initialize() {
  bl64_dbg_app_show_function
  inst64_lib_base_initialize &&
    inst64_python_select_method ||
    return $?

  if [[ "$INST64_PYTHON_METHOD" == 'NATIVE' ]]; then
    bl64_check_privilege_root &&
      bl64_os_check_flavor \
        "$BL64_OS_FLAVOR_ALPINE" \
        "$BL64_OS_FLAVOR_DEBIAN" \
        "$BL64_OS_FLAVOR_FEDORA" \
        "$BL64_OS_FLAVOR_REDHAT" \
        "$BL64_OS_FLAVOR_SUSE" &&
      bl64_pkg_setup ||
      return $?
  fi

  inst64_python_select_platform &&
    inst64_python_select_packages &&
    inst64_lib_cli_set_path ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

bl64_lib_script_version_set '4.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_python_initialize &&
  inst64_python_prepare &&
  inst64_python_install &&
  inst64_python_setup &&
  inst64_python_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
