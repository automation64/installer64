#!/usr/bin/env bash
# Template: 2.3.0
# Snippet: install-custom-package-4.2.0
# Snippet: select-platform-1.0.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 1.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#docs/skeletons/installer/install-package-custom

# BashLib64 location
export INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
export INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
export INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
export INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Base path for 3rd party applications
export INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
# Location for temporary files
export INST64_TMP="${INST64_TMP:-/tmp}"

export INST64_DEVBIN64_PLATFORM="${INST64_DEVBIN64_PLATFORM:-}"
export INST64_DEVBIN64_TARGET="${INST64_DEVBIN64_TARGET:-${INST64_OPT_ROOT}/devbin64}"
export INST64_DEVBIN64_VERSION="${INST64_DEVBIN64_VERSION:-latest}"
# Install system wide? Requires root privilege
export INST64_DEVBIN64_SYSTEM_WIDE="${INST64_DEVBIN64_SYSTEM_WIDE:-YES}"
# Installation method
export INST64_DEVBIN64_METHOD="${INST64_DEVBIN64_METHOD:-CUSTOM}"

export INST64_DEVBIN64_REPO_NAME='devbin64'
export INST64_DEVBIN64_REPO_OWNER='automation64'

export INST64_DEVBIN64_PACKAGE_URL=''
export INST64_DEVBIN64_INSTALLER=''
export INST64_DEVBIN64_PACKAGES=''
export INST64_DEVBIN64_CLI_NAME=''
export INST64_DEVBIN64_CLI_PATH=''

#
# Functions
#

function inst64_devbin64_install_custom_package() {
  bl64_dbg_app_show_function
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner='root'

  if bl64_lib_flag_is_enabled "$INST64_DEVBIN64_SYSTEM_WIDE"; then
    INST64_DEVBIN64_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_DEVBIN64_CLI_NAME}"
  else
    INST64_DEVBIN64_CLI_PATH="${INST64_DEVBIN64_TARGET}/${INST64_DEVBIN64_CLI_NAME}"
    app_target_owner="$BL64_VAR_DEFAULT"
  fi

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" &&
    bl64_rxtx_github_get_asset \
      "$INST64_DEVBIN64_REPO_OWNER" "$INST64_DEVBIN64_REPO_NAME" "$INST64_DEVBIN64_VERSION" "$INST64_DEVBIN64_PACKAGES" "${work_path}/${INST64_DEVBIN64_PACKAGES}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  [[ -d "$INST64_DEVBIN64_TARGET" ]] &&
    bl64_fs_rm_full "$INST64_DEVBIN64_TARGET"
  bl64_fs_create_dir "$app_target_mode" "$app_target_owner" "$app_target_owner" "$INST64_DEVBIN64_TARGET" &&
    bl64_arc_open_tar "${work_path}/${INST64_DEVBIN64_PACKAGES}" "$INST64_DEVBIN64_TARGET" ||
    return $?

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

#######################################
# Selects platform ID
#
# * Platform ID format is defined by the package provider
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Platform ID
# Returns:
#   0: selection completed ok
#   >0: unable to selection
#######################################
function inst64_devbin64_select_platform() {
  bl64_dbg_app_show_function
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_devbin64_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_DEVBIN64_METHOD" == 'CUSTOM' ]]; then
    inst64_devbin64_install_custom_package
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_devbin64_select_packages() {
  bl64_dbg_app_show_function
  local package_prefix=''
  local package_sufix=''
  if [[ "$INST64_DEVBIN64_METHOD" == 'CUSTOM' ]]; then
    package_prefix='devbin64'
    package_sufix='.tar.gz'
    INST64_DEVBIN64_PACKAGES="${package_prefix}${package_sufix}"
  fi
  [[ -z "$INST64_DEVBIN64_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_devbin64_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  inst64_devbin64_select_platform &&
    inst64_devbin64_select_packages ||
    return $?
  if [[ "$INST64_DEVBIN64_METHOD" == 'CUSTOM' ]]; then
    bl64_arc_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_devbin64_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  [[ -d "$INST64_DEVBIN64_TARGET" ]] &&
    [[ -x "${INST64_DEVBIN64_TARGET}/bin/dev-bootstrap" ]]
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_devbin64_initialize() {
  bl64_dbg_app_show_function
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_DEVBIN64_METHOD' \
    "$INST64_DEVBIN64_METHOD" \
    'CUSTOM' ||
    return $?

  if [[ "$INST64_DEVBIN64_METHOD" == 'CUSTOM' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_DEVBIN64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_os_check_compatibility \
      "${BL64_OS_ALM}" \
      "${BL64_OS_ALP}" \
      "${BL64_OS_AMZ}" \
      "${BL64_OS_CNT}" \
      "${BL64_OS_DEB}" \
      "${BL64_OS_FD}" \
      "${BL64_OS_OL}" \
      "${BL64_OS_RCK}" \
      "${BL64_OS_RHEL}" \
      "${BL64_OS_SLES}" \
      "${BL64_OS_UB}"
  fi
}

#
# Main
#

declare inst64_devbin64_installer_description='Install application: DevBin64'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_devbin64_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_devbin64_initialize &&
  inst64_devbin64_prepare &&
  inst64_devbin64_install &&
  inst64_devbin64_verify
bl64_msg_show_batch_finish $? "$inst64_devbin64_installer_description"
