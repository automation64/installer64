#!/usr/bin/env bash
# Template: 2.3.0
# Snippet: install-git-repo-1.1.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 1.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64=''
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT=''
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE=''

declare INST64_TESTSSL_GIT_SERVER="${INST64_TESTSSL_GIT_SERVER:-https://github.com/drwetter}"
declare INST64_TESTSSL_GIT_REPO="${INST64_TESTSSL_GIT_REPO:-testssl.sh.git}"
declare INST64_TESTSSL_TARGET=''
declare INST64_TESTSSL_BRANCH="${INST64_TESTSSL_BRANCH:-3.2}"
# Installation method
declare INST64_TESTSSL_METHOD="${INST64_TESTSSL_METHOD:-GIT}"

declare INST64_TESTSSL_INSTALLER=''
declare INST64_TESTSSL_PACKAGES=''
declare INST64_TESTSSL_CLI_NAME='testssl.sh'
declare INST64_TESTSSL_CLI_PATH=''

#
# Functions
#

function inst64_testssl_install_git_repo() {
  bl64_dbg_app_show_function
  local app_target_mode='0755'
  local app_target_owner='root'

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    INST64_TESTSSL_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_TESTSSL_CLI_NAME}"
  else
    INST64_TESTSSL_CLI_PATH="${INST64_TESTSSL_TARGET}/${INST64_TESTSSL_CLI_NAME}"
    app_target_owner="$BL64_VAR_DEFAULT"
  fi

  bl64_msg_show_task 'download application'
  bl64_rxtx_git_get_dir \
    "${INST64_TESTSSL_GIT_SERVER}/${INST64_TESTSSL_GIT_REPO}" \
    '.' \
    "$INST64_TESTSSL_TARGET" \
    "$BL64_VAR_ON" \
    "$INST64_TESTSSL_BRANCH" ||
    return $?

  bl64_msg_show_task 'deploy application'
  if [[ -n "$INST64_TESTSSL_INSTALLER" ]]; then
    "$INST64_TESTSSL_INSTALLER" ||
      return $?
  fi
  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_fs_path_permission_set "$app_target_mode" "$app_target_mode" "$app_target_owner" "$BL64_VAR_DEFAULT" "$BL64_VAR_ON" \
      "$INST64_TESTSSL_TARGET" ||
      return $?
  fi

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_task "publish application to searchable path (${INST64_TESTSSL_CLI_PATH})"
    # shellcheck disable=SC2086
    bl64_fs_symlink_create "${INST64_TESTSSL_TARGET}/${INST64_TESTSSL_CLI_NAME}" "$INST64_TESTSSL_CLI_PATH" "$BL64_VAR_ON" ||
      return $?
  fi

  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_testssl_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_TESTSSL_METHOD" == 'GIT' ]]; then
    inst64_testssl_install_git_repo
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_testssl_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_TESTSSL_METHOD" == 'GIT' ]]; then
    INST64_TESTSSL_PACKAGES='NONE'
  fi
  [[ -z "$INST64_TESTSSL_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_testssl_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  inst64_testssl_select_packages || return $?
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_testssl_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_TESTSSL_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_testssl_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    [[ "$INST64_SYSTEM_WIDE" == 'NO' ]] && INST64_OPT_ROOT="$INST64_HOME" || INST64_OPT_ROOT='/opt'
  fi
  INST64_TESTSSL_TARGET="${INST64_TESTSSL_TARGET:-${INST64_OPT_ROOT}/testssl}"
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_TESTSSL_METHOD' \
    "$INST64_TESTSSL_METHOD" \
    'GIT' ||
    return $?

  if [[ "$INST64_TESTSSL_METHOD" == 'GIT' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_os_check_compatibility \
      "${BL64_OS_FD}" \
      "${BL64_OS_KL}" \
      "${BL64_OS_OL}" \
      "${BL64_OS_UB}"
  fi
}

#
# Main
#

declare inst64_testssl_installer_description='Install application: TestSSL'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_testssl_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_testssl_initialize &&
  inst64_testssl_prepare &&
  inst64_testssl_install &&
  inst64_testssl_verify
bl64_msg_show_batch_finish $? "$inst64_testssl_installer_description"
