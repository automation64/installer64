#!/usr/bin/env bash
# Template: 2.2.0
# Snippet: install-os-package-2.5.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 1.3.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64=''
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"

# Installation method
declare INST64_YAMLLINT_METHOD="${INST64_YAMLLINT_METHOD:-NATIVE}"
# Enable development packages?
declare INST64_YAMLLINT_DEVELOPMENT="${INST64_YAMLLINT_DEVELOPMENT:-$BL64_VAR_OFF}"
declare INST64_YAMLLINT_PACKAGES=''
declare INST64_YAMLLINT_CLI_NAME='yamllint'
declare INST64_YAMLLINT_CLI_PATH=''

#
# Functions
#

function inst64_yamllint_install_os_packages() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'deploy packages'
  INST64_YAMLLINT_CLI_PATH="/usr/bin/${INST64_YAMLLINT_CLI_NAME}"
  # shellcheck disable=SC2086
  bl64_pkg_deploy $INST64_YAMLLINT_PACKAGES
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_yamllint_install() {
  bl64_dbg_app_show_function
  inst64_yamllint_select_packages || return $?
  if [[ "$INST64_YAMLLINT_METHOD" == 'NATIVE' ]]; then
    inst64_yamllint_install_os_packages
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_yamllint_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_YAMLLINT_METHOD" == 'NATIVE' ]]; then
    if bl64_os_is_distro "$BL64_OS_UB" "$BL64_OS_ALP"; then
      INST64_YAMLLINT_PACKAGES='yamllint'
    fi
  fi
  [[ -z "$INST64_YAMLLINT_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_yamllint_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  if [[ "$INST64_YAMLLINT_METHOD" == 'NATIVE' ]]; then
    bl64_pkg_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_yamllint_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_YAMLLINT_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_yamllint_initialize() {
  bl64_dbg_app_show_function
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_YAMLLINT_METHOD' \
    "$INST64_YAMLLINT_METHOD" \
    'NATIVE' ||
    return $?

  if [[ "$INST64_YAMLLINT_METHOD" == 'NATIVE' ]]; then
    bl64_check_privilege_root &&
    bl64_os_check_compatibility \
      "${BL64_OS_ALP}-3" \
      "${BL64_OS_UB}-22"
  fi
}

#
# Main
#

declare inst64_yamllint_installer_description='Install application: YAMLLint'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_yamllint_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_yamllint_initialize &&
  inst64_yamllint_prepare &&
  inst64_yamllint_install &&
  inst64_yamllint_verify
bl64_msg_show_batch_finish $? "$inst64_yamllint_installer_description"
