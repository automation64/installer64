#!/usr/bin/env bash
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# Home root
declare INST64_HOME="${HOME}/at64"

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"
# Replace if already installed?
declare INST64_REPLACE_INSTALLED="${INST64_REPLACE_INSTALLED:-NO}"

# shellcheck disable=SC2034
declare INST64_INSTALLER64_SCRIPT_VERSION='1.2.2'
# Installation method
declare INST64_INSTALLER64_METHOD="${INST64_INSTALLER64_METHOD:-BINARY}"
# Source repository
declare INST64_INSTALLER64_SOURCE="${INST64_INSTALLER64_SOURCE:-https://github.com/automation64/installer64}"
# Target installation directory
declare INST64_INSTALLER64_TARGET="${INST64_INSTALLER64_TARGET:-}"
# Target application version
declare INST64_INSTALLER64_VERSION="${INST64_INSTALLER64_VERSION:-latest}"

declare INST64_INSTALLER64_PLATFORM=''
declare INST64_TARGET_SYSTEM_USER=''
declare INST64_TARGET_SYSTEM_GROUP=''
declare INST64_WEB_CMD_GET='none'
declare INST64_GH_API='https://api.github.com/repos/automation64/installer64/releases/latest'
declare INST64_PKG_MAIN=''
declare INST64_TARGET_MODE_DIR='0755'
declare INST64_TARGET_MODE_FILE='0755'
declare INST64_STATUS_FLAG='CONTINUE'
declare INST64_STATUS_PATH=''

#
# Lib
#
# * Imported from lib-bash
#

function inst64_lib_task_process_start() {
  inst64_lib_message_show_process "started"
  [[ -n "$INST64_DEBUG" ]] && set -x
  return 0
}

function inst64_lib_task_process_finish() {
  local -i status=$1
  if ((status == 0)); then
    inst64_lib_message_show_process "finished successfully"
  else
    inst64_lib_message_show_process "finished with errors: exit-status-${status}"
  fi
  # shellcheck disable=SC2086
  return $status
}

function inst64_lib_message_show_process() {
  echo "Process: [install-${INST64_APP_NAME}] ${1:-}"
}

function inst64_lib_message_show_task() {
  echo "Task   : ${1:-}"
}

function inst64_lib_message_show_error() {
  echo "Error  : ${1:-}" >&2
}

function inst64_lib_message_show_warning() {
  echo "Warning: ${1:-}" >&2
}

function inst64_lib_message_show_phase() {
  echo "Phase  : ${1:-}"
}

function inst64_lib_task_retry() {
  local max_retries=$1
  local wait_time=$2
  local attempt=1

  shift 2
  while :; do
    "$@" && return 0
    ((attempt++))
    if ((attempt > max_retries)); then
      inst64_lib_message_show_error "command failed after ${max_retries} attempts"
      return 1
    fi
    if ((attempt == 2)); then
      inst64_lib_message_show_warning "retrying in ${wait_time} seconds... (attempt ${attempt}/${max_retries})"
    fi
    sleep "$wait_time"
  done
}

#
# Functions
#

function inst64_fetch_latest_version() {
  # shellcheck disable=SC2249
  case "$INST64_WEB_CMD_GET" in
  'curl')
    "$INST64_WEB_CMD_GET" \
      -s \
      "$INST64_GH_API" |
      grep '"tag_name":'
    ;;
  'wget')
    "$INST64_WEB_CMD_GET" \
      -q -O- \
      "$INST64_GH_API" |
      grep '"tag_name":'
    ;;
  esac
}

function inst64_identify_latest() {
  local max_retries=5
  local wait_time=5

  inst64_lib_task_retry "$max_retries" "$wait_time" inst64_fetch_latest_version
}

function inst64_download_binary_package() {
  local package_name="$1"
  local package_url=''

  package_url="${INST64_INSTALLER64_SOURCE}/releases/download/${INST64_INSTALLER64_VERSION}/${package_name}"
  inst64_lib_message_show_task 'download application'
  # shellcheck disable=SC2249
  case "$INST64_WEB_CMD_GET" in
  'curl')
    "$INST64_WEB_CMD_GET" \
      -s \
      -L \
      -o "${INST64_TMP}/${package_name}" \
      "$package_url"
    ;;
  'wget')
    "$INST64_WEB_CMD_GET" \
      -q \
      -O "${INST64_TMP}/${package_name}" \
      "$package_url"
    ;;
  esac
}

function inst64_open_binary_package() {
  local package_name="$1"

  inst64_lib_message_show_task "deploy application (package: ${package_name})"
  [[ -f "${INST64_TMP}/${package_name}" ]] &&
    tar zx -C "$INST64_INSTALLER64_TARGET" -f "${INST64_TMP}/${package_name}" &&
    chmod "$INST64_TARGET_MODE_FILE" "$INST64_INSTALLER64_TARGET"/* ||
    return $?

  if [[ "$EUID" == '0' ]]; then
    chown -R "${INST64_TARGET_SYSTEM_USER}:${INST64_TARGET_SYSTEM_GROUP}" "${INST64_INSTALLER64_TARGET}" ||
      return $?
  fi
  rm -f "${INST64_TMP}/${package_name}"
  return 0
}

function inst64_install_binary() {
  local package_name=''

  for package_name in $INST64_PKG_MAIN; do
    inst64_download_binary_package "$package_name" &&
      inst64_open_binary_package "$package_name" ||
      return $?
  done
}

inst64_select_platform() {
  INST64_INSTALLER64_PLATFORM="$(uname -s)"
  [ -z "$INST64_INSTALLER64_PLATFORM" ] && inst64_lib_message_show_error 'unable to determine platform id' && return 1
  if [ "$INST64_INSTALLER64_PLATFORM" != 'Darwin' ] && [ "$INST64_INSTALLER64_PLATFORM" != 'Linux' ]; then
    inst64_lib_message_show_error "unsupported platform (${INST64_INSTALLER64_PLATFORM})"
    return 1
  fi
  if [[ "$INST64_INSTALLER64_PLATFORM" == 'Linux' ]]; then
    INST64_TARGET_SYSTEM_USER='root'
    INST64_TARGET_SYSTEM_GROUP='root'
  elif [[ "$INST64_INSTALLER64_PLATFORM" == 'Darwin' ]]; then
    INST64_TARGET_SYSTEM_USER='root'
    INST64_TARGET_SYSTEM_GROUP='wheel'
  fi
}

function inst64_select_packages() {
  if [[ "$INST64_INSTALLER64_METHOD" == 'BINARY' ]]; then
    INST64_PKG_MAIN='installer64-scripts.tgz'
    if [[ "$INST64_INSTALLER64_VERSION" == 'latest' ]]; then
      INST64_INSTALLER64_VERSION="$(inst64_identify_latest)" &&
        INST64_INSTALLER64_VERSION="${INST64_INSTALLER64_VERSION##*:??}" &&
        INST64_INSTALLER64_VERSION="${INST64_INSTALLER64_VERSION%%?,*}" ||
        return $?
    fi
  fi
  [[ -z "$INST64_INSTALLER64_VERSION" ]] && inst64_lib_message_show_error 'unable to determine package version' && return 1
  [[ -z "$INST64_PKG_MAIN" ]] && inst64_lib_message_show_error 'unable to determine package name' && return 1
  return 0
}

function inst64_prepare() {
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 0
  inst64_lib_message_show_phase 'prepare deployment'
  if [[ -n "$INST64_OPT_ROOT" && ! -d "$INST64_OPT_ROOT" ]]; then
    mkdir "$INST64_OPT_ROOT" &&
      chmod "$INST64_TARGET_MODE_DIR" "$INST64_OPT_ROOT" ||
      return $?
  fi
  if [[ ! -d "$INST64_INSTALLER64_TARGET" ]]; then
    mkdir "$INST64_INSTALLER64_TARGET" &&
      chmod "$INST64_TARGET_MODE_DIR" "$INST64_INSTALLER64_TARGET"
  fi
}

function inst64_install() {
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 0
  if [[ "$INST64_INSTALLER64_METHOD" == 'BINARY' ]]; then
    inst64_install_binary &&
      "${INST64_INSTALLER64_TARGET}/install-bashlib64"
  fi
}

function inst64_verify() {
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 0
  inst64_lib_message_show_phase 'verify deployment'
  [[ -d "${INST64_INSTALLER64_TARGET}" ]] &&
    [[ -x "${INST64_INSTALLER64_TARGET}/install-installer64" ]] &&
    [[ -x "${INST64_INSTALLER64_TARGET}/install-bashlib64" ]] &&
    echo "$INST64_INSTALLER64_VERSION" >"$INST64_STATUS_PATH"
}

function inst64_initialize() {
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    if [[ -d '/opt/inst64' ]]; then
      INST64_SYSTEM_WIDE='YES'
    else
      INST64_SYSTEM_WIDE='NO'
    fi
  fi
  if [[ -z "$INST64_INSTALLER64_TARGET" ]]; then
    if [[ "$INST64_SYSTEM_WIDE" == 'YES' ]]; then
      INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
    else
      INST64_OPT_ROOT="${INST64_OPT_ROOT:-$INST64_HOME}"
    fi
    INST64_INSTALLER64_TARGET="${INST64_INSTALLER64_TARGET:-${INST64_OPT_ROOT}/inst64}"
  fi

  if [[ "$INST64_SYSTEM_WIDE" == 'YES' && "$EUID" != '0' ]]; then
    inst64_lib_message_show_error 'root privileges are required for system-wide installation'
    return 1
  fi

  [[ "$INST64_INSTALLER64_METHOD" != 'BINARY' ]] &&
    inst64_lib_message_show_error 'unsupported installation method' &&
    return 1

  if command -v 'curl' >/dev/null 2>&1; then
    INST64_WEB_CMD_GET='curl'
  elif command -v 'wget' >/dev/null 2>&1; then
    INST64_WEB_CMD_GET='wget'
  else
    inst64_lib_message_show_error 'no download tool found (curl, wget)'
    return 1
  fi

  if ! command -v 'tar' >/dev/null 2>&1; then
    inst64_lib_message_show_error 'no archive tool found (tar)'
    return 1
  fi
  INST64_STATUS_PATH="${INST64_INSTALLER64_TARGET}/version"
  inst64_select_platform &&
    inst64_select_packages ||
    return $?
  if [[ -f "$INST64_STATUS_PATH" ]]; then
    if [[ "${INST64_INSTALLER64_VERSION}" == "$(<"$INST64_STATUS_PATH")" ]]; then
      if [[ "$INST64_REPLACE_INSTALLED" != 'YES' ]]; then
        inst64_lib_message_show_warning "application already installed. No further action taken. Set INST64_REPLACE_INSTALLED='YES' if replacement is required (current-version: ${INST64_INSTALLER64_VERSION})"
        INST64_STATUS_FLAG='SKIP'
        return 0
      fi
    fi
  fi
  echo 'Install application: Installer64'
  echo "  INST64_SYSTEM_WIDE: ${INST64_SYSTEM_WIDE}"
  echo "  INST64_INSTALLER64_METHOD: ${INST64_INSTALLER64_METHOD}"
  echo "  INST64_INSTALLER64_PLATFORM: ${INST64_INSTALLER64_PLATFORM}"
  echo "  INST64_INSTALLER64_SOURCE: ${INST64_INSTALLER64_SOURCE}"
  echo "  INST64_INSTALLER64_TARGET: ${INST64_INSTALLER64_TARGET}"
  echo "  INST64_INSTALLER64_VERSION: ${INST64_INSTALLER64_VERSION}"
}

#
# Main
#

inst64_lib_task_process_start &&
  inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_verify
inst64_lib_task_process_finish $?
