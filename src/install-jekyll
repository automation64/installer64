#!/usr/bin/env bash
# Template: 2.0.1
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source=lib/bl64/bashlib64.bash
source "${INST64_BASHLIB64}/bashlib64.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# User applications binaries location
declare INST64_USER_BIN="${INST64_USER_BIN:-${HOME}/.local/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

# Installation method
declare INST64_JEKYLL_METHOD="${INST64_JEKYLL_METHOD:-GEM}"
declare INST64_JEKYLL_GEM_BIN="${INST64_JEKYLL_GEM_BIN:-/usr/bin/gem}"
declare INST64_JEKYLL_GCC_BIN="${INST64_JEKYLL_GCC_BIN:-/usr/bin/gcc}"
declare INST64_PKG_MAIN=''
declare INST64_CLI_NAME='jekyll'

#
# Functions
#

function inst64_jekyll_install_with_gem() {
  bl64_dbg_app_show_function
  # shellcheck disable=SC2086
  "$INST64_JEKYLL_GEM_BIN" \
    install \
    --no-document \
    --norc \
    $INST64_PKG_MAIN ||
    return $?
  "$INST64_JEKYLL_GEM_BIN" sources --clear-all
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_jekyll_install() {
  bl64_dbg_app_show_function
  inst64_jekyll_select_packages || return $?
  bl64_msg_show_task 'deploy application'
  if [[ "$INST64_JEKYLL_METHOD" == 'GEM' ]]; then
    inst64_jekyll_install_with_gem
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_jekyll_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_JEKYLL_METHOD" == 'GEM' ]]; then
    INST64_PKG_MAIN="jekyll bundler"
  fi
  [[ -z "$INST64_PKG_MAIN" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_jekyll_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_jekyll_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  if [[ "$INST64_JEKYLL_METHOD" == 'GEM' ]]; then
    # shellcheck disable=SC2154
    "${GEM_HOME}/bin/${INST64_CLI_NAME}" --version
  fi
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_jekyll_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  bl64_os_check_compatibility \
    "${BL64_OS_UB}-22" &&
    bl64_fmt_list_check_membership 'invalid installation method for the parameter INST64_JEKYLL_METHOD' \
      "$INST64_JEKYLL_METHOD" \
      'GEM' &&
    bl64_check_privilege_not_root ||
    return $?

  if [[ "$INST64_JEKYLL_METHOD" == 'GEM' ]]; then
    bl64_check_command "$INST64_JEKYLL_GEM_BIN" &&
      bl64_check_command "$INST64_JEKYLL_GCC_BIN" &&
      bl64_check_export 'GEM_HOME' 'Ruby Gem environment is not properly setup' ||
      return $?
  fi
  # shellcheck disable=SC2181
  (($? != 0)) && return $BL64_LIB_ERROR_TASK_FAILED
  bl64_msg_show_setup 'Install application: Jekyll' \
    'INST64_JEKYLL_METHOD' 'INST64_SYSTEM_WIDE' 
}

#
# Main
#

bl64_lib_script_version_set '1.1.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_jekyll_initialize &&
  inst64_jekyll_prepare &&
  inst64_jekyll_install &&
  inst64_jekyll_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
