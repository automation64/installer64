#!/usr/bin/env bash
# Template: install-bl64-python-1.1.0
# Template: install-bl64-native-1.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
[[ ! -d "$INST64_BASHLIB64" && -d "${HOME}/at64" ]] && INST64_BASHLIB64="${HOME}/at64"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-py.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo "Fatal: unable to load BashLib64 libraries (${INST64_BASHLIB64})." && exit 1; }
# shellcheck source-path=src disable=SC2015
source "${BL64_SCRIPT_PATH}/lib-bl64" ||
  { echo 'Fatal: unable to load Installer64 libraries.' && exit 1; }

#
# Globals
#

# Installation method
declare INST64_PIPX_METHOD="${INST64_PIPX_METHOD:-AUTO}"
# Installation destination
declare INST64_PIPX_TARGET="${INST64_PIPX_TARGET:-}"
# Hardware architecture
declare INST64_PIPX_PLATFORM="${INST64_PIPX_PLATFORM:-}"
# Application version
declare INST64_PIPX_VERSION="${INST64_PIPX_VERSION:-latest}"

# App information
INST64_APP_NAME='pipx'
INST64_APP_ID='PIPX'
INST64_APP_FULL_NAME='pipX'
# CLI information
INST64_CLI_NAME='pipx'

#
# Functions
#

function inst64_install_native() {
  bl64_dbg_app_show_function
  inst64_lib_pkg_install
}

function inst64_prepare() {
  bl64_dbg_app_show_function
  inst64_lib_step_prepare || return 0
}

function inst64_install() {
  bl64_dbg_app_show_function
  inst64_lib_step_install || return 0
  if [[ "$INST64_PIPX_METHOD" == 'PIP' ]]; then
    inst64_lib_python_install_pip
  elif [[ "$INST64_PIPX_METHOD" == 'NATIVE' ]]; then
    inst64_install_native
  fi
}

function inst64_setup() {
  bl64_dbg_app_show_function
  inst64_lib_step_setup || return 0
}

function inst64_verify() {
  bl64_dbg_app_show_function
  inst64_lib_step_verify || return 0
  "${INST64_CLI_PATH}/${INST64_CLI_NAME}" --version
}

function inst64_select_method() {
  bl64_dbg_app_show_function
  inst64_lib_app_check_method \
    'AUTO' \
    'PIP' \
    'NATIVE' ||
    return $?
  if [[ "$INST64_PIPX_METHOD" == 'AUTO' ]]; then
    if [[ "$BL64_PY_VERSION_PYTHON3" == '3.12' ]]; then
      INST64_PIPX_METHOD='NATIVE'
    else
      INST64_PIPX_METHOD='PIP'
      INST64_SYSTEM_WIDE='NO'
    fi
  fi
}

function inst64_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_PIPX_METHOD" == 'NATIVE' ]]; then
    INST64_CLI_PATH='/usr/bin'
  fi
  return 0
}

function inst64_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_PIPX_METHOD" == 'PIP' ]]; then
    INST64_PKG_MAIN='pipx'
    if [[ "$INST64_PIPX_VERSION" == 'latest' ]]; then
      version_target=''
    else
      version_target="==${INST64_PIPX_VERSION}.*"
    fi
    INST64_PKG_MAIN="${INST64_PKG_MAIN}${version_target}"
  elif [[ "$INST64_PIPX_METHOD" == 'NATIVE' ]]; then
    INST64_PKG_MAIN="pipx"
  fi
  inst64_lib_package_check_definition
}

function inst64_initialize() {
  bl64_dbg_app_show_function
  bl64_py_setup &&
    inst64_lib_base_initialize &&
    inst64_select_method &&
    inst64_lib_method_initialize ||
    return $?

  if [[ "$INST64_PIPX_METHOD" == 'PIP' ]]; then
    bl64_check_privilege_not_root ||
      return $?
  elif [[ "$INST64_PIPX_METHOD" == 'NATIVE' ]]; then
    bl64_check_privilege_root &&
      bl64_os_check_not_version "${BL64_OS_ALM}-10" &&
      bl64_pkg_setup ||
      return $?
  fi

  inst64_select_platform &&
    inst64_select_packages &&
    inst64_lib_cli_set_path ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

bl64_lib_script_version_set '2.1.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_setup &&
  inst64_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
