#!/usr/bin/env bash
# Template: install-bl64-binary-1.1.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
[[ ! -d "$INST64_BASHLIB64" && -d "${HOME}/at64" ]] && INST64_BASHLIB64="${HOME}/at64"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo "Fatal: unable to load BashLib64 libraries (${INST64_BASHLIB64})." && exit 1; }
# shellcheck source-path=src disable=SC2015
source "${BL64_SCRIPT_PATH}/lib-bl64" ||
  { echo "Fatal: unable to load Installer64 libraries (${BL64_SCRIPT_PATH}/lib-bl64)" && exit 1; }

#
# Globals
#

# Installation method
declare INST64_YAZI_METHOD="${INST64_YAZI_METHOD:-BINARY}"
# Installation destination
declare INST64_YAZI_TARGET="${INST64_YAZI_TARGET:-}"
# Hardware architecture
declare INST64_YAZI_PLATFORM="${INST64_YAZI_PLATFORM:-}"
# Application version
declare INST64_YAZI_VERSION="${INST64_YAZI_VERSION:-latest}"

INST64_APP_NAME='yazi'
INST64_APP_ID='YAZI'
INST64_APP_FULL_NAME='Yazi - A modern file manager'
INST64_CLI_NAME='yazi'

INST64_GH_REPO_NAME='yazi'
INST64_GH_REPO_OWNER='sxyazi'
INST64_PKG_MAIN_PREFIX='yazi-'
INST64_PKG_MAIN_SUFFIX='.zip'
INST64_CPU_DARWIN_ARM64='aarch64-apple-darwin'
INST64_CPU_LINUX_AMD64_GNU='x86_64-unknown-linux-gnu'
INST64_CPU_LINUX_AMD64_MUSL='x86_64-unknown-linux-musl'

#
# Functions
#

function inst64_install_binary() {
  bl64_dbg_app_show_function

  INST64_WORK_PATH_SOURCE="${INST64_CLI_NAME}-${INST64_YAZI_PLATFORM}"
  inst64_lib_task_download
  inst64_lib_staging_create &&
    inst64_lib_gh_get_asset &&
    inst64_lib_staging_open_zip ||
    return $?

  inst64_lib_task_deploy
  inst64_lib_target_create &&
    bl64_fs_path_copy "$INST64_CLI_MODE" "$INST64_TARGET_MODE" "$INST64_TARGET_OWNER" "$INST64_TARGET_GROUP" \
      "$INST64_YAZI_TARGET" \
      "${INST64_WORK_PATH_STAGING}/${INST64_WORK_PATH_SOURCE}/${INST64_CLI_NAME}" \
      "${INST64_WORK_PATH_STAGING}/${INST64_WORK_PATH_SOURCE}/ya" ||
    return $?

  inst64_lib_task_cleanup
  inst64_lib_staging_remove
}

function inst64_prepare() {
  bl64_dbg_app_show_function
  inst64_lib_step_prepare || return 0
  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    inst64_lib_base_create_path
  fi
}

function inst64_install() {
  bl64_dbg_app_show_function
  inst64_lib_step_install || return 0
  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    inst64_install_binary
  fi
}

function inst64_setup() {
  bl64_dbg_app_show_function
  inst64_lib_step_setup || return 0
  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    inst64_lib_task_publish
    inst64_lib_cli_promote &&
      bl64_fs_symlink_create "${INST64_WORK_PATH_CLI}" "${INST64_CLI_PATH}/ya" "$BL64_VAR_ON"
  fi
}

function inst64_verify() {
  bl64_dbg_app_show_function
  inst64_lib_step_verify || return 0
  "${INST64_CLI_PATH}/${INST64_CLI_NAME}" --version || return $?
  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    inst64_lib_app_register_version
  fi
}

function inst64_select_method() {
  bl64_dbg_app_show_function
  inst64_lib_app_check_method \
    'AUTO' \
    'BINARY' ||
    return $?
  if [[ "$INST64_YAZI_METHOD" == 'AUTO' ]]; then
    INST64_YAZI_METHOD='BINARY'
  fi
}

function inst64_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    if [[ -z "$INST64_YAZI_PLATFORM" ]]; then
      if [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_MACOS" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_ARM64" ]]; then
        INST64_YAZI_PLATFORM="$INST64_CPU_DARWIN_ARM64"
      elif [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_LINUX" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_AMD64" ]]; then
        # shellcheck disable=SC2249
        case "$BL64_OS_FLAVOR" in
        "$BL64_OS_FLAVOR_ALPINE" | "$BL64_OS_FLAVOR_DEBIAN" | "$BL64_OS_FLAVOR_SUSE")
          INST64_YAZI_PLATFORM="$INST64_CPU_LINUX_AMD64_MUSL"
          ;;
        "$BL64_OS_FLAVOR_FEDORA" | "$BL64_OS_FLAVOR_REDHAT")
          INST64_YAZI_PLATFORM="$INST64_CPU_LINUX_AMD64_GNU"
          ;;
        esac
      fi
    fi
    inst64_lib_platform_check_cpu
  fi
}

function inst64_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_YAZI_VERSION" == 'latest' ]]; then
      INST64_YAZI_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_GH_REPO_OWNER" "$INST64_GH_REPO_NAME")" ||
        return $?
    fi
    INST64_PKG_MAIN="${INST64_PKG_MAIN_PREFIX}${INST64_YAZI_PLATFORM}${INST64_PKG_MAIN_SUFFIX}"
  fi
  inst64_lib_package_check_definition
}

function inst64_initialize() {
  bl64_dbg_app_show_function
  inst64_lib_base_initialize &&
    inst64_select_method ||
    return $?

  if [[ "$INST64_YAZI_METHOD" == 'BINARY' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_os_check_not_version \
      "${BL64_OS_ALM}-9" \
      "${BL64_OS_RCK}-9" \
      "${BL64_OS_OL}-9" &&
    bl64_arc_setup ||
      return $?
  fi

  inst64_select_platform &&
    inst64_select_packages &&
    inst64_lib_cli_set_path ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

bl64_lib_script_version_set '1.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_setup &&
  inst64_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
