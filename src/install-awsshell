#!/usr/bin/env bash
# Template: 2.3.0
# Snippet: install-python-3.2.2
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-py.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

declare INST64_AWSSHELL_VERSION="${INST64_AWSSHELL_VERSION:-latest}"
# Installation method
declare INST64_AWSSHELL_METHOD="${INST64_AWSSHELL_METHOD:-PIP}"

declare INST64_AWSSHELL_PIPX_BIN="${INST64_AWSSHELL_PIPX_BIN:-pipx}"
declare INST64_AWSSHELL_PACKAGES=''
declare INST64_AWSSHELL_CLI_NAME='aws-shell'
declare INST64_AWSSHELL_CLI_PATH=''

#
# Functions
#

function inst64_awsshell_install_with_pip() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application'
  INST64_AWSSHELL_CLI_PATH="${HOME}/.local/bin/${INST64_AWSSHELL_CLI_NAME}"
  # shellcheck disable=SC2086
  bl64_fs_set_umask "$BL64_FS_UMASK_RW_USER_RO_ALL" &&
    bl64_py_pip_usr_deploy $INST64_AWSSHELL_PACKAGES
}

function inst64_awsshell_install_with_pipx() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application'
  INST64_AWSSHELL_CLI_PATH="${INST64_AWSSHELL_CLI_NAME}"
  # shellcheck disable=SC2086
  "$INST64_AWSSHELL_PIPX_BIN" install $INST64_AWSSHELL_PACKAGES
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_awsshell_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_AWSSHELL_METHOD" == 'PIPX' ]]; then
    inst64_awsshell_install_with_pipx
  elif [[ "$INST64_AWSSHELL_METHOD" == 'PIP' ]]; then
    inst64_awsshell_install_with_pip
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_awsshell_select_packages() {
  bl64_dbg_app_show_function
  local version_target=''

  if [[ "$INST64_AWSSHELL_METHOD" == 'PIPX' || "$INST64_AWSSHELL_METHOD" == 'PIP' ]]; then
    if [[ "$INST64_AWSSHELL_VERSION" == 'latest' ]]; then
      version_target=''
    else
      version_target="==${INST64_AWSSHELL_VERSION}.*"
    fi
    INST64_AWSSHELL_PACKAGES="aws-shell${version_target}"
  fi
  [[ -z "$INST64_AWSSHELL_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_awsshell_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  inst64_awsshell_select_packages || return $?
  if [[ "$INST64_AWSSHELL_METHOD" == 'PIPX' || "$INST64_AWSSHELL_METHOD" == 'PIP' ]]; then
    bl64_py_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_awsshell_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_AWSSHELL_CLI_PATH" --help
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_awsshell_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_AWSSHELL_METHOD' \
    "$INST64_AWSSHELL_METHOD" \
    'PIP' 'PIPX' ||
    return $?

  if [[ "$INST64_AWSSHELL_METHOD" == 'PIPX' || "$INST64_AWSSHELL_METHOD" == 'PIP' ]]; then
    if [[ "$INST64_AWSSHELL_METHOD" == 'PIPX' ]]; then
      bl64_check_command_search_path "$INST64_AWSSHELL_PIPX_BIN" ||
      return $?
    fi
    bl64_check_privilege_not_root &&
      bl64_os_check_compatibility \
        "${BL64_OS_ALM}" \
        "${BL64_OS_ALP}" \
        "${BL64_OS_AMZ}" \
        "${BL64_OS_CNT}" \
        "${BL64_OS_DEB}" \
        "${BL64_OS_FD}" \
        "${BL64_OS_OL}" \
        "${BL64_OS_RCK}" \
        "${BL64_OS_RHEL}" \
        "${BL64_OS_UB}"
  fi
  bl64_msg_show_setup 'Install application: AWS Shell' \
    'INST64_SYSDEN64_METHOD' 'INST64_SYSTEM_WIDE' 
}

#
# Main
#

bl64_lib_script_version_set '1.2.2'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_awsshell_initialize &&
  inst64_awsshell_prepare &&
  inst64_awsshell_install &&
  inst64_awsshell_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
