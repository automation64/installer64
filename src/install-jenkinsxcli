#!/usr/bin/env bash
# Template: 1.2.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source=lib/bl64/bashlib64.bash
source "${INST64_BASHLIB64}/bashlib64.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Installer64 location
declare INST64_INSTALLER_ROOT="${INST64_INSTALLER_ROOT:-/opt/installer64}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

declare INST64_JENKINSXCLI_PLATFORM="${INST64_JENKINSXCLI_PLATFORM:-linux-amd64}"
declare INST64_JENKINSXCLI_TARGET="${INST64_JENKINSXCLI_TARGET:-}"
declare INST64_JENKINSXCLI_VERSION="${INST64_JENKINSXCLI_VERSION:-latest}"
# Installation method
declare INST64_JENKINSXCLI_METHOD="${INST64_JENKINSXCLI_METHOD:-BINARY}"

declare INST64_JENKINSXCLI_REPO_NAME='jx'
declare INST64_JENKINSXCLI_REPO_OWNER='jenkins-x'

#
# Functions
#

function inst64_jenkinsxcli_install_binary_release() {
  bl64_dbg_app_show_function
  local package_prefix='jx-'
  local package_sufix='.tar.gz'
  local package_name=''
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner='root'
  local app_cli_mode='0755'
  local app_cli='jx'

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" || return $?
  if [[ "$INST64_JENKINSXCLI_VERSION" == 'latest' ]]; then
    INST64_JENKINSXCLI_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_JENKINSXCLI_REPO_OWNER" "$INST64_JENKINSXCLI_REPO_NAME")" ||
      return $?
  fi
  package_name="${package_prefix}${INST64_JENKINSXCLI_PLATFORM}${package_sufix}"

  bl64_rxtx_github_get_asset "$INST64_JENKINSXCLI_REPO_OWNER" "$INST64_JENKINSXCLI_REPO_NAME" "$INST64_JENKINSXCLI_VERSION" "$package_name" "${work_path}/${package_name}" &&
    bl64_arc_open_tar "${work_path}/${package_name}" "${work_path}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  bl64_fs_dir_create "$app_target_mode" "$app_target_owner" "$app_target_owner" "$INST64_JENKINSXCLI_TARGET" &&
    bl64_fs_path_copy "$app_cli_mode" "$BL64_VAR_DEFAULT" "$app_target_owner" "$app_target_owner" "$INST64_JENKINSXCLI_TARGET" "${work_path}/${app_cli}" ||
    return $?

  bl64_msg_show_task "publish application to searchable path (${INST64_LOCAL_BIN})"
  # shellcheck disable=SC2086
  bl64_fs_symlink_create "${INST64_JENKINSXCLI_TARGET}/${app_cli}" "${INST64_LOCAL_BIN}/${app_cli}" "$BL64_VAR_ON" ||
    return $?

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_jenkinsxcli_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_JENKINSXCLI_METHOD" == 'BINARY' ]]; then
    inst64_jenkinsxcli_install_binary_release
  fi
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function inst64_jenkinsxcli_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  INST64_JENKINSXCLI_TARGET="${INST64_JENKINSXCLI_TARGET:-${INST64_OPT_ROOT}/jenkinsxcli}"
  bl64_os_check_compatibility \
    "${BL64_OS_UB}-22" \
    "${BL64_OS_OL}-9" &&
    bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_JENKINSXCLI_METHOD' \
      "$INST64_JENKINSXCLI_METHOD" \
      'BINARY' &&
    bl64_arc_setup &&
    bl64_check_privilege_root
  bl64_msg_show_setup 'Install application: XXX' \
    'INST64_SYSTEM_WIDE' 'INST64_SYSDEN64_METHOD' 
}

#
# Main
#

declare inst64_jenkinsxcli_installer_description='Install application: JenkinsX CLI'

bl64_lib_script_version_set '1.2.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_jenkinsxcli_initialize &&
  inst64_jenkinsxcli_install
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
