#!/usr/bin/env bash
# Template: 2.2.0
# Snippet: install-custom-package-4.1.1
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 2.3.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64=''
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT=''
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE=''

declare INST64_BATSCORE_SOURCE="${INST64_BATSCORE_SOURCE:-https://github.com/bats-core}"
declare INST64_BATSCORE_TARGET="${INST64_BATSCORE_TARGET:-${INST64_OPT_ROOT}/bats-core}"
# Installation method
declare INST64_BATSCORE_METHOD="${INST64_BATSCORE_METHOD:-CUSTOM}"

declare INST64_BATSCORE_TARGET_HELPERS="${INST64_BATSCORE_TARGET}/test_helper"

declare INST64_BATSCORE_PACKAGE_URL=''
declare INST64_BATSCORE_PACKAGE_URL_PLUGIN_SUPPORT=''
declare INST64_BATSCORE_PACKAGE_URL_PLUGIN_ASSERT=''
declare INST64_BATSCORE_PACKAGE_URL_PLUGIN_FILEexport=''
declare INST64_BATSCORE_PACKAGES=''
declare INST64_BATSCORE_PACKAGES_PLUGIN_SUPPORT=''
declare INST64_BATSCORE_PACKAGES_PLUGIN_ASSERT=''
declare INST64_BATSCORE_PACKAGES_PLUGIN_FILE=''
declare INST64_BATSCORE_CLI_NAME='bats'
declare INST64_BATSCORE_CLI_PATH=''

#
# Functions
#

function inst64_batscore_install_custom_package() {
  bl64_dbg_app_show_function
  local app_target_mode='0755'

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    INST64_BATSCORE_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_BATSCORE_CLI_NAME}"
  else
    INST64_BATSCORE_CLI_PATH="${INST64_BATSCORE_TARGET}/${INST64_BATSCORE_CLI_NAME}"
  fi

  bl64_msg_show_task 'deploy application'
  bl64_rxtx_git_get_dir \
    "$INST64_BATSCORE_PACKAGE_URL" '.' "$INST64_BATSCORE_TARGET" "$BL64_VAR_DEFAULT" 'master' &&
    bl64_fs_mkdir_full "${INST64_BATSCORE_TARGET_HELPERS}" &&
    bl64_rxtx_git_get_dir \
      "$INST64_BATSCORE_PACKAGE_URL_PLUGIN_SUPPORT" '.' "$INST64_BATSCORE_TARGET_HELPERS/${INST64_BATSCORE_PACKAGES_PLUGIN_SUPPORT}" "$BL64_VAR_DEFAULT" 'master' &&
    bl64_rxtx_git_get_dir \
      "$INST64_BATSCORE_PACKAGE_URL_PLUGIN_ASSERT" '.' "$INST64_BATSCORE_TARGET_HELPERS/${INST64_BATSCORE_PACKAGES_PLUGIN_ASSERT}" "$BL64_VAR_DEFAULT" 'master' &&
    bl64_rxtx_git_get_dir \
      "$INST64_BATSCORE_PACKAGE_URL_PLUGIN_FILE" '.' "$INST64_BATSCORE_TARGET_HELPERS/${INST64_BATSCORE_PACKAGES_PLUGIN_FILE}" "$BL64_VAR_DEFAULT" 'master' &&
    bl64_fs_path_permission_set "$app_target_mode" "$app_target_mode" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_ON" "$INST64_BATSCORE_TARGET" ||
    return $?

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_task "publish application to searchable path (${INST64_BATSCORE_CLI_PATH})"
    # shellcheck disable=SC2086
    bl64_fs_symlink_create "${INST64_BATSCORE_TARGET}/bin/${INST64_BATSCORE_CLI_NAME}" "$INST64_BATSCORE_CLI_PATH" "$BL64_VAR_ON" ||
      return $?
  fi
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_batscore_install() {
  bl64_dbg_app_show_function
  inst64_batscore_select_packages || return $?
  if [[ "$INST64_BATSCORE_METHOD" == 'CUSTOM' ]]; then
    inst64_batscore_install_custom_package
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_batscore_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_BATSCORE_METHOD" == 'CUSTOM' ]]; then
    INST64_BATSCORE_PACKAGES='bats-core'
    INST64_BATSCORE_PACKAGES_PLUGIN_SUPPORT='bats-support'
    INST64_BATSCORE_PACKAGES_PLUGIN_ASSERT='bats-assert'
    INST64_BATSCORE_PACKAGES_PLUGIN_FILE='bats-file'
    INST64_BATSCORE_PACKAGE_URL="${INST64_BATSCORE_SOURCE}/${INST64_BATSCORE_PACKAGES}.git"
    INST64_BATSCORE_PACKAGE_URL_PLUGIN_SUPPORT="${INST64_BATSCORE_SOURCE}/${INST64_BATSCORE_PACKAGES_PLUGIN_SUPPORT}.git"
    INST64_BATSCORE_PACKAGE_URL_PLUGIN_ASSERT="${INST64_BATSCORE_SOURCE}/${INST64_BATSCORE_PACKAGES_PLUGIN_ASSERT}.git"
    INST64_BATSCORE_PACKAGE_URL_PLUGIN_FILE="${INST64_BATSCORE_SOURCE}/${INST64_BATSCORE_PACKAGES_PLUGIN_FILE}.git"
  fi
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_batscore_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  if [[ "$INST64_BATSCORE_METHOD" == 'CUSTOM' ]]; then
    bl64_arc_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_batscore_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_BATSCORE_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_batscore_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    [[ "$INST64_SYSTEM_WIDE" == 'NO' ]] && INST64_OPT_ROOT="$INST64_HOME" || INST64_OPT_ROOT='/opt'
  fi
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_BATSCORE_METHOD' \
    "$INST64_BATSCORE_METHOD" \
    'CUSTOM' ||
    return $?

  if [[ "$INST64_BATSCORE_METHOD" == 'CUSTOM' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
  fi
}

#
# Main
#

declare inst64_batscore_installer_description='Install application: Batscore'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_batscore_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_batscore_initialize &&
  inst64_batscore_prepare &&
  inst64_batscore_install &&
  inst64_batscore_verify
bl64_msg_show_batch_finish $? "$inst64_batscore_installer_description"
