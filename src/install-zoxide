#!/usr/bin/env bash
# Template: install-github-3.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# User applications binaries location
declare INST64_USER_BIN="${INST64_USER_BIN:-${HOME}/.local/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

declare INST64_ZOXIDE_PLATFORM="${INST64_ZOXIDE_PLATFORM:-}"
declare INST64_ZOXIDE_TARGET="${INST64_ZOXIDE_TARGET:-}"
declare INST64_ZOXIDE_VERSION="${INST64_ZOXIDE_VERSION:-latest}"
# Installation method
declare INST64_ZOXIDE_METHOD="${INST64_ZOXIDE_METHOD:-BINARY}"

declare INST64_GH_REPO_NAME='zoxide'
declare INST64_GH_REPO_OWNER='ajeetdsouza'
declare INST64_APP_PACKAGES=''
declare INST64_CLI_NAME='zoxide'
declare INST64_CLI_PATH=''

#
# Functions
#

function inst64_zoxide_install_binary_release() {
  bl64_dbg_app_show_function
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner="$BL64_IAM_SYSTEM_USER"
  local app_target_group="$BL64_IAM_SYSTEM_GROUP"
  local app_cli_mode='0755'
  local app_work_path="${INST64_CLI_NAME}"

  if ! bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    app_target_owner="$BL64_VAR_DEFAULT"
    app_target_group="$BL64_VAR_DEFAULT"
  fi

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" || return $?
  bl64_rxtx_github_get_asset \
    "$INST64_GH_REPO_OWNER" "$INST64_GH_REPO_NAME" "$INST64_ZOXIDE_VERSION" "$INST64_APP_PACKAGES" "${work_path}/${INST64_APP_PACKAGES}" &&
    bl64_arc_open_tar "${work_path}/${INST64_APP_PACKAGES}" "${work_path}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  bl64_fs_dir_create "$app_target_mode" "$app_target_owner" "$app_target_group" "$INST64_ZOXIDE_TARGET" &&
    bl64_fs_path_copy "$app_cli_mode" "$app_target_mode" "$app_target_owner" "$app_target_group" "$INST64_ZOXIDE_TARGET" "${work_path}/${app_work_path}" ||
    return $?

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_zoxide_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_zoxide_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_ZOXIDE_METHOD" == 'BINARY' ]]; then
    inst64_zoxide_install_binary_release
  fi
}

#######################################
# Perform post installation setup
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Setup progress
# Returns:
#   0: setup completed ok
#   >0: unable to setup
#######################################
function inst64_zoxide_setup() {
  bl64_dbg_app_show_function
  local app_cli_source=''
  if [[ "$INST64_ZOXIDE_METHOD" == 'BINARY' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      app_cli_source="${INST64_ZOXIDE_TARGET}/${INST64_CLI_NAME}"
      bl64_msg_show_task "publish application to searchable path (${INST64_CLI_PATH})"
      # shellcheck disable=SC2086
      bl64_fs_symlink_create "${app_cli_source}" "$INST64_CLI_PATH" "$BL64_VAR_ON" ||
        return $?
    fi
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_zoxide_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_CLI_PATH" --version
}

#######################################
# Selects platform ID
#
# * Platform ID format is defined by the package provider
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Platform ID
# Returns:
#   0: selection completed ok
#   >0: unable to selection
#######################################
function inst64_zoxide_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_ZOXIDE_METHOD" == 'BINARY' ]]; then
    if [[ -z "$INST64_ZOXIDE_PLATFORM" ]]; then
      if [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_MACOS" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_ARM64" ]]; then
        INST64_ZOXIDE_PLATFORM='aarch64-apple-darwin' 
      elif bl64_os_is_distro "${BL64_OS_ALP}" "${BL64_OS_DEB}" "${BL64_OS_SLES}"; then
        INST64_ZOXIDE_PLATFORM='x86_64-unknown-linux-musl'
      elif bl64_os_is_distro "${BL64_OS_ALM}" "${BL64_OS_AMZ}" "${BL64_OS_CNT}" "${BL64_OS_FD}" "${BL64_OS_KL}" "${BL64_OS_OL}" "${BL64_OS_RCK}" "${BL64_OS_RHEL}" "${BL64_OS_UB}"; then
        INST64_ZOXIDE_PLATFORM='x86_64-unknown-linux-musl'
      else
        bl64_msg_show_error "unsupported OS and Machine combination (OS_TYPE:${BL64_OS_TYPE} / MACHINE: ${BL64_OS_MACHINE})"
        return $BL64_LIB_ERROR_OS_INCOMPATIBLE
      fi
    fi
  fi
  [[ -z "$INST64_ZOXIDE_PLATFORM" ]] && bl64_msg_show_error 'unable to determine platform id' && return 1
  return 0
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_zoxide_select_packages() {
  bl64_dbg_app_show_function
  local package_prefix=''
  local package_suffix=''
  if [[ "$INST64_ZOXIDE_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_ZOXIDE_VERSION" == 'latest' ]]; then
      INST64_ZOXIDE_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_GH_REPO_OWNER" "$INST64_GH_REPO_NAME")" ||
        return $?
    fi
    package_prefix='zoxide-'
    package_suffix='.tar.gz'
    INST64_APP_PACKAGES="${package_prefix}${INST64_ZOXIDE_VERSION#v}-${INST64_ZOXIDE_PLATFORM}${package_suffix}"
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      INST64_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_CLI_NAME}"
    else
      INST64_CLI_PATH="${INST64_ZOXIDE_TARGET}/${INST64_CLI_NAME}"
    fi
  fi
  [[ -z "$INST64_APP_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_zoxide_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  INST64_ZOXIDE_TARGET="${INST64_ZOXIDE_TARGET:-${INST64_OPT_ROOT}/zoxide}"
  bl64_fmt_list_check_membership 'invalid installation method for the parameter INST64_ZOXIDE_METHOD' \
    "$INST64_ZOXIDE_METHOD" \
    'BINARY' ||
    return $?

  if [[ "$INST64_ZOXIDE_METHOD" == 'BINARY' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_arc_setup ||
      return $?
  fi
  inst64_zoxide_select_platform &&
    inst64_zoxide_select_packages ||
    return $?

  bl64_msg_show_setup 'Install application: Zoxide' \
    'INST64_SYSTEM_WIDE' 'INST64_ZOXIDE_METHOD' \
    'INST64_ZOXIDE_PLATFORM' \
    'INST64_GH_REPO_OWNER' \
    'INST64_GH_REPO_NAME' \
    'INST64_ZOXIDE_TARGET' \
    'INST64_ZOXIDE_VERSION' \
    'INST64_CLI_PATH'
}

#
# Main
#

bl64_lib_script_version_set '1.1.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_zoxide_initialize &&
  inst64_zoxide_prepare &&
  inst64_zoxide_install &&
  inst64_zoxide_setup &&
  inst64_zoxide_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
