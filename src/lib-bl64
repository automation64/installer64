#!/usr/bin/env bash
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

# shellcheck source-path=lib/bl64

#
# Globals
#

# shellcheck disable=SC2034
{

  #
  # Global parameters
  #

  # Enable debugging? Set to YES to enable
  declare INST64_DEBUG="${INST64_DEBUG:-}"
  # Base path for local applications
  declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
  # Local applications binaries location
  declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
  # User applications binaries location
  declare INST64_USER_BIN="${INST64_USER_BIN:-${HOME}/.local/bin}"
  # Location for temporary files
  declare INST64_TMP="${INST64_TMP:-/tmp}"
  # Base path for 3rd party applications
  declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
  # Install system wide? Requires root privilege
  declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"
  # Replace if already installed?
  declare INST64_REPLACE_INSTALLED="${INST64_REPLACE_INSTALLED:-NO}"
  # Refresh package manager before installation and cleanup after?
  declare INST64_REFRESH_PACKAGE_MANAGER="${INST64_REFRESH_PACKAGE_MANAGER:-YES}"

  #
  # Global definitions
  #

  # App information
  declare INST64_APP_NAME=''
  declare INST64_APP_ID=''
  declare INST64_APP_FULL_NAME=''

  #
  # Method definitions
  #

  # Base target configuration
  declare INST64_ROOT_PATH_DEFAULT_SYSTEM=''
  declare INST64_ROOT_PATH_DEFAULT_USER=''

  # Target configuration
  declare INST64_TARGET_PATH_DEFAULT=''
  declare INST64_TARGET_PATH_DEFAULT_SYSTEM=''
  declare INST64_TARGET_PATH_DEFAULT_USER=''
  declare INST64_TARGET_OWNER="$BL64_IAM_SYSTEM_USER"
  declare INST64_TARGET_GROUP="$BL64_IAM_SYSTEM_GROUP"
  declare INST64_TARGET_MODE='0755'
  declare INST64_TARGET_MODE_DIR='0755'
  declare INST64_TARGET_MODE_FILE='0644'

  # Work paths
  declare INST64_WORK_PATH_SOURCE=''
  declare INST64_WORK_PATH_STAGING=''

  # Application packages
  declare INST64_PKG_MAIN=''
  declare INST64_PKG_MAIN_PREFIX=''
  declare INST64_PKG_MAIN_SUFFIX=''
  declare INST64_PKG_PRE=''
  declare INST64_PKG_POST=''
  declare INST64_PKG_DEV=''

  # CPU Architecture definitions
  declare INST64_CPU_DARWIN_ARM64=''
  declare INST64_CPU_LINUX_AMD64=''
  declare INST64_CPU_LINUX_AMD64_GNU=''
  declare INST64_CPU_LINUX_AMD64_MUSL=''
  declare INST64_CPU_LINUX_ARM64=''
  declare INST64_CPU_ALL_ALL='ALL'

  # Custom application installer
  declare INST64_APP_INSTALLER=''

  # CLI information
  declare INST64_CLI_NAME=''
  declare INST64_CLI_PATH=''
  declare INST64_CLI_SUBPATH=''
  declare INST64_CLI_MODE='0755'
  declare INST64_CLI_TARGET=''

  # GitHub repository information
  declare INST64_GH_REPO_OWNER=''
  declare INST64_GH_REPO_NAME=''

  # Generic Git repository information
  declare INST64_GIT_SERVER=''
  declare INST64_GIT_REPO=''
  declare INST64_GIT_BRANCH=''

  # Generic Web repository information
  declare INST64_WEB_REPO_URL=''
  declare INST64_WEB_REPO_PATH=''

  # OS package manager information
  declare INST64_OS_REPO_NAME=''
  declare INST64_OS_SOURCE_YUM=''
  declare INST64_OS_SOURCE_APT=''
  declare INST64_OS_REPO_KEY_YUM=''
  declare INST64_OS_REPO_KEY_APT=''

  #
  # Internal variables
  #

  # Inst64 Library version
  declare INST64_LIB_VERSION_BL64='1.0.0'

  # User wide home path
  declare INST64_HOME="${HOME}/at64"

  # Install progress status
  declare INST64_STATUS_FLAG='CONTINUE'
  declare INST64_STATUS_PATH=''

  # Target management
  declare INST64_TARGET_REQUESTED='NO'

}

#
# Functions
#

#######################################
# Sets the default value for INST64_SYSTEM_WIDE.
#######################################
function inst64_lib_base_set_system_wide() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d '/opt/bl64' || -d '/opt/inst64' ]] && INST64_SYSTEM_WIDE='YES' || INST64_SYSTEM_WIDE='NO'
  fi
}

#######################################
# Sets the base installation path (INST64_OPT_ROOT).
#######################################
function inst64_lib_base_set_path() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      if [[ -n "$INST64_ROOT_PATH_DEFAULT_SYSTEM" ]]; then
        INST64_OPT_ROOT="$INST64_ROOT_PATH_DEFAULT_SYSTEM"
      else
        INST64_OPT_ROOT='/opt'
      fi
    else
      if [[ -n "$INST64_ROOT_PATH_DEFAULT_USER" ]]; then
        INST64_OPT_ROOT="$INST64_ROOT_PATH_DEFAULT_USER"
      else
        INST64_OPT_ROOT="$INST64_HOME"
      fi
    fi
  fi
}

#######################################
# Sets the application-specific target installation path.
#######################################
function inst64_lib_target_set_path() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  local target_basename="$INST64_APP_NAME"

  if [[ -z "${!target}" ]]; then
    if [[ -n "$INST64_TARGET_PATH_DEFAULT" ]]; then
      target_basename="$INST64_TARGET_PATH_DEFAULT"
    else
      if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
        [[ -n "$INST64_TARGET_PATH_DEFAULT_SYSTEM" ]] && target_basename="$INST64_TARGET_PATH_DEFAULT_SYSTEM"
      else
        [[ -n "$INST64_TARGET_PATH_DEFAULT_USER" ]] && target_basename="$INST64_TARGET_PATH_DEFAULT_USER"
      fi
    fi

    printf \
      -v "INST64_${INST64_APP_ID}_TARGET" \
      '%s/%s' \
      "${INST64_OPT_ROOT}" \
      "${target_basename}"
  else
    INST64_TARGET_REQUESTED='YES'
  fi
}

#######################################
# Sets target ownership and permissions based on INST64_SYSTEM_WIDE.
#######################################
function inst64_lib_target_set_owner() {
  bl64_dbg_app_show_function
  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    INST64_TARGET_OWNER="$BL64_IAM_SYSTEM_USER"
    INST64_TARGET_GROUP="$BL64_IAM_SYSTEM_GROUP"
  else
    INST64_TARGET_OWNER="$BL64_VAR_DEFAULT"
    INST64_TARGET_GROUP="$BL64_VAR_DEFAULT"
  fi
}

#######################################
# Sets the default path for CLI symlinks (INST64_CLI_PATH).
#######################################
function inst64_lib_cli_set_path() {
  bl64_dbg_app_show_function
  local method="INST64_${INST64_APP_ID}_METHOD"

  [[ -n "$INST64_CLI_PATH" ]] && return 0
  if [[ "${!method}" == 'PIPX' ]]; then
    INST64_CLI_PATH="${HOME}/.local/bin"
  elif [[ "${!method}" == 'PIP' ]]; then
    INST64_CLI_PATH="${BL64_PY_PATH_PIP_USR_BIN}"
  elif [[ "${!method}" == 'NATIVE' ]]; then
    INST64_CLI_PATH='/usr/bin'
  elif [[ "${!method}" == 'BINARY' || "${!method}" == 'CUSTOM' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      INST64_CLI_PATH="${INST64_LOCAL_BIN}"
    else
      INST64_CLI_PATH="${INST64_USER_BIN}"
    fi
  fi
}

#######################################
# Validates the installation method for the current application.
#######################################
function inst64_lib_app_check_method() {
  bl64_dbg_app_show_function "$@"
  local requested="INST64_${INST64_APP_ID}_METHOD"
  bl64_fmt_list_check_membership \
    "invalid installation method for the parameter INST64_${INST64_APP_ID}_METHOD" \
    "${!requested}" \
    "$@"
}

#######################################
# Checks if the application is already installed at the current version.
#######################################
function inst64_lib_app_check_installed() {
  bl64_dbg_app_show_function
  local app_target="INST64_${INST64_APP_ID}_TARGET"
  local app_version="INST64_${INST64_APP_ID}_VERSION"

  INST64_STATUS_PATH="${!app_target}/.${BL64_SCRIPT_NAME}"
  if [[ -f "$INST64_STATUS_PATH" ]]; then
    if [[ "${!app_version}" == "$(<"$INST64_STATUS_PATH")" ]]; then
      if ! bl64_lib_flag_is_enabled "$INST64_REPLACE_INSTALLED"; then
        bl64_msg_show_warning "application already installed. No further action taken. Set INST64_REPLACE_INSTALLED='YES' if replacement is required (current-version: ${!app_version})"
        INST64_STATUS_FLAG='SKIP'
        return 0
      fi
    fi
  fi

  bl64_dbg_app_show_comments 'use return-1 to inform that the application is not installed'
  return 1
}

#######################################
# Displays key installation parameters for the current application.
#######################################
function inst64_lib_message_show_parameters() {
  bl64_dbg_app_show_function
  local parameter_list=''
  local method_variable_suffix=''
  local var_suffix=''
  local var_name=''

  method_variable_suffix+=" ${INST64_APP_ID}_METHOD"
  method_variable_suffix+=" ${INST64_APP_ID}_PLATFORM"
  method_variable_suffix+=" ${INST64_APP_ID}_TARGET"
  method_variable_suffix+=" ${INST64_APP_ID}_VERSION"
  method_variable_suffix+=" CLI_NAME"
  method_variable_suffix+=" CLI_PATH"
  method_variable_suffix+=" GH_REPO_NAME"
  method_variable_suffix+=" GH_REPO_OWNER"
  method_variable_suffix+=" GIT_BRANCH"
  method_variable_suffix+=" GIT_REPO"
  method_variable_suffix+=" GIT_SERVER"
  method_variable_suffix+=" PKG_DEV"
  method_variable_suffix+=" PKG_MAIN"
  method_variable_suffix+=" OS_REPO_NAME"
  method_variable_suffix+=" OS_REPO_KEY_YUM"
  method_variable_suffix+=" OS_REPO_KEY_APT"
  method_variable_suffix+=" OS_SOURCE_APT"
  method_variable_suffix+=" OS_SOURCE_YUM"
  method_variable_suffix+=" REPLACE_INSTALLED"
  method_variable_suffix+=" REFRESH_PACKAGE_MANAGER"
  method_variable_suffix+=" SYSTEM_WIDE"
  method_variable_suffix+=" WEB_REPO_PATH"
  method_variable_suffix+=" WEB_REPO_URL"

  for var_suffix in $method_variable_suffix; do
    var_name="INST64_${var_suffix}"
    if [[ -n "${!var_name}" ]]; then
      parameter_list+=" ${var_name}"
    fi
  done

  # shellcheck disable=SC2086
  bl64_msg_show_setup \
    "Install application: ${INST64_APP_FULL_NAME}" \
    $parameter_list
}

#######################################
# Creates base installation directories if not system-wide.
#
# * Must create local regardless of requested target to allow promotion to searchable path
#######################################
function inst64_lib_base_create_path() {
  bl64_dbg_app_show_function
  local method="INST64_${INST64_APP_ID}_METHOD"
  [[ "${!method}" =~ ('NATIVE'|'PIP'|'PIPX'|'NPM') ]] && return 0
  if ! bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_bsh_xdg_create "$HOME" &&
      bl64_fs_dir_create "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
        "$INST64_OPT_ROOT"
  fi
}

#######################################
# Shows an error message for unsupported OS/Machine combinations.
#######################################
function inst64_lib_alert_incompatible_platform() {
  bl64_dbg_app_show_function
  bl64_msg_show_error "unsupported OS and Machine combination (OS_TYPE:${BL64_OS_TYPE} / MACHINE: ${BL64_OS_MACHINE})"
  return $BL64_LIB_ERROR_OS_INCOMPATIBLE
}

#######################################
# Register current app version.
#
# * Optional function used mainly by BINARY installation methods
# * Used to register the current application version in the status file
#######################################
function inst64_lib_app_register_version() {
  bl64_dbg_app_show_function
  local version="INST64_${INST64_APP_ID}_VERSION"
  bl64_check_parameter "$version" || return $?
  echo "${!version}" >"$INST64_STATUS_PATH"
}

function inst64_lib_base_initialize() {
  bl64_dbg_app_show_function
  bl64_msg_show_phase 'initialize installer'

  bl64_dbg_app_show_comments 'Set default value for INST64_CLI_NAME'
  INST64_WORK_PATH_SOURCE="$INST64_CLI_NAME"

  inst64_lib_base_set_system_wide &&
    inst64_lib_base_set_path &&
    inst64_lib_target_set_owner &&
    inst64_lib_target_set_path &&
    return 0

  inst64_lib_message_show_error 'installer initialization failed'
  return $BL64_LIB_ERROR_TASK_FAILED
}

function inst64_lib_step_prepare() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'prepare deployment'
  return 0
}

function inst64_lib_step_install() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'deploy application'
  return 0
}

function inst64_lib_step_setup() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'setup environment'
  bl64_check_parameter 'INST64_CLI_PATH' &&
    bl64_check_parameter 'INST64_CLI_NAME'
}

function inst64_lib_step_verify() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'verify deployment'
  bl64_check_parameter 'INST64_CLI_PATH' &&
    bl64_check_parameter 'INST64_CLI_NAME'
}

function inst64_lib_task_download() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'download application'
  return 0
}

function inst64_lib_task_deploy() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'deploy application'
  return 0
}

function inst64_lib_task_publish() {
  bl64_dbg_app_show_function
  bl64_msg_show_task "publish application to searchable path (${INST64_CLI_PATH})"
  return 0
}

function inst64_lib_task_cleanup() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'cleanup temporary files'
  return 0
}

function inst64_lib_python_install_pip() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application'
  if [[ -n "$INST64_PKG_PRE" ]]; then
    # shellcheck disable=SC2086
    bl64_py_pip_usr_install $INST64_PKG_PRE ||
      return $?
  fi
  # shellcheck disable=SC2086
  bl64_fs_set_umask "$BL64_FS_UMASK_RW_USER_RO_ALL" &&
    bl64_py_pip_usr_deploy $INST64_PKG_MAIN ||
    return $?
  if [[ -n "$INST64_PKG_POST" ]]; then
    # shellcheck disable=SC2086
    bl64_py_pip_usr_install $INST64_PKG_POST ||
      return $?
  fi
  return 0
}

function inst64_lib_python_install_pipx() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application'
  if [[ -n "$INST64_PKG_PRE" ]]; then
    # shellcheck disable=SC2086
    inst64_lib_command_run_pipx install --preinstall $INST64_PKG_PRE $INST64_PKG_MAIN ||
      return $?
  else
    # shellcheck disable=SC2086
    inst64_lib_command_run_pipx install $INST64_PKG_MAIN $INST64_PKG_PRE ||
      return $?
  fi
  if [[ -n "$INST64_PKG_POST" ]]; then
    # shellcheck disable=SC2086
    inst64_lib_command_run_pipx inject $INST64_PKG_MAIN $INST64_PKG_POST ||
      return $?
  fi
  return 0
}

function inst64_lib_command_run_pipx() {
  bl64_dbg_app_show_function "$@"
  local command_pipx=''

  command_pipx="$(bl64_bsh_command_locate 'pipx' "$HOME/.local/bin")"
  [[ -z "$command_pipx" ]] &&
    bl64_msg_show_error 'pipx command not found. Please install pipx and try again' &&
    return 1

  bl64_dbg_app_trace_start
  # shellcheck disable=SC2086
  "$command_pipx" \
    "$@"
  bl64_dbg_app_trace_stop
}

function inst64_lib_package_check_definition() {
  bl64_dbg_app_show_function
  [[ -n "$INST64_PKG_MAIN" ]] && return 0
  bl64_msg_show_error 'unable to determine application package name (INST64_PKG_MAIN)'
  return $BL64_LIB_ERROR_PARAMETER_MISSING
}

function inst64_lib_platform_check_cpu() {
  bl64_dbg_app_show_function
  local platform="INST64_${INST64_APP_ID}_PLATFORM"
  [[ -n "${!platform}" ]] && return 0
  inst64_lib_alert_incompatible_platform
}

function inst64_lib_app_check_mode_user() {
  bl64_dbg_app_show_function
  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_error 'system wide installation is not supported (INST64_SYSTEM_WIDE)'
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi
  return 0
}

function inst64_lib_app_check_mode_system() {
  bl64_dbg_app_show_function
  if ! bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_error 'user wide installation is not supported (INST64_SYSTEM_WIDE)'
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi
  return 0
}

function inst64_lib_target_normalize() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  bl64_check_parameter "$target" || return $?
  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_fs_path_permission_set \
      "$INST64_TARGET_MODE_FILE" "$INST64_TARGET_MODE_DIR" \
      "$INST64_TARGET_OWNER" "$INST64_TARGET_GROUP" \
      "$BL64_VAR_ON" \
      "${!target}"
  fi
}

function inst64_lib_git_get_dir() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  bl64_check_parameter 'INST64_GIT_SERVER' &&
    bl64_check_parameter 'INST64_GIT_REPO' &&
    bl64_check_parameter "$target" || return $?
  bl64_rxtx_git_get_dir \
    "${INST64_GIT_SERVER}/${INST64_GIT_REPO}" \
    '.' \
    "${!target}" \
    "$BL64_VAR_ON" \
    "$INST64_GIT_BRANCH"
}

function inst64_lib_cli_promote() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  local needs_target_alias='NO'

  bl64_check_parameter 'INST64_CLI_PATH' &&
    bl64_check_parameter 'INST64_CLI_NAME' || return $?

  bl64_dbg_app_show_comments 'create symlink for CLI'
  if [[ -z "$INST64_CLI_TARGET" ]]; then
    INST64_CLI_TARGET="${!target}/${INST64_CLI_NAME}"
  fi
  bl64_fs_symlink_create \
    "${INST64_CLI_TARGET}" "${INST64_CLI_PATH}/${INST64_CLI_NAME}" \
    "$BL64_VAR_ON" ||
    return $?

  bl64_dbg_app_show_comments 'create additional symlink for normalized CLI name'
  if [[ "$INST64_CLI_TARGET" != "${!target}/${INST64_CLI_NAME}" ]]; then
    bl64_fs_symlink_create \
      "$INST64_CLI_TARGET" "${!target}/${INST64_CLI_NAME}" \
      "$BL64_VAR_ON"
  fi
}

function inst64_lib_cli_normalize() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  bl64_check_parameter "$target" || return $?
  bl64_fs_path_permission_set \
    "$INST64_CLI_MODE" "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_OFF" \
    "${!target}/${INST64_CLI_SUBPATH}${INST64_CLI_SUBPATH:+/}${INST64_CLI_NAME}"
}

function inst64_lib_target_create() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  local method="INST64_${INST64_APP_ID}_METHOD"
  [[ "${!method}" =~ ('NATIVE'|'PIP'|'PIPX'|'NPM') ]] && return 0
  bl64_fs_dir_create \
    "$INST64_TARGET_MODE_DIR" "$INST64_TARGET_OWNER" "$INST64_TARGET_GROUP" \
    "${!target}"
}

function inst64_lib_gh_get_asset() {
  bl64_dbg_app_show_function
  local asset_version="INST64_${INST64_APP_ID}_VERSION"
  bl64_check_parameter "$asset_version" || return $?
  bl64_rxtx_github_get_asset \
    "$INST64_GH_REPO_OWNER" "$INST64_GH_REPO_NAME" \
    "${!asset_version}" \
    "$INST64_PKG_MAIN" \
    "${INST64_WORK_PATH_STAGING}/${INST64_PKG_MAIN}"
}

function inst64_lib_staging_open_tar() {
  bl64_dbg_app_show_function
  bl64_check_parameter 'INST64_WORK_PATH_STAGING' &&
    bl64_check_parameter 'INST64_PKG_MAIN' || return $?
  bl64_arc_open_tar \
    "${INST64_WORK_PATH_STAGING}/${INST64_PKG_MAIN}" \
    "${INST64_WORK_PATH_STAGING}"
}

function inst64_lib_staging_open_zip() {
  bl64_dbg_app_show_function
  bl64_check_parameter 'INST64_WORK_PATH_STAGING' &&
    bl64_check_parameter 'INST64_PKG_MAIN' || return $?
  bl64_arc_open_zip \
    "${INST64_WORK_PATH_STAGING}/${INST64_PKG_MAIN}" \
    "${INST64_WORK_PATH_STAGING}"
}

function inst64_lib_staging_create() {
  bl64_dbg_app_show_function
  INST64_WORK_PATH_STAGING="$(bl64_fs_create_tmpdir)"
}

function inst64_lib_staging_remove() {
  bl64_dbg_app_show_function
  bl64_fs_rm_tmpdir "$INST64_WORK_PATH_STAGING"
  return 0
}

function inst64_lib_target_populate() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  bl64_check_parameter "$target" || return $?
  bl64_fs_path_copy \
    "$INST64_CLI_MODE" "$INST64_TARGET_MODE_DIR" \
    "$INST64_TARGET_OWNER" "$INST64_TARGET_GROUP" \
    "${!target}" \
    "${INST64_WORK_PATH_STAGING}/${INST64_WORK_PATH_SOURCE}"
}

function inst64_lib_target_open_tar() {
  bl64_dbg_app_show_function
  bl64_check_parameter 'INST64_WORK_PATH_STAGING' &&
    bl64_check_parameter 'INST64_PKG_MAIN' || return $?
  bl64_arc_open_tar \
    "${INST64_WORK_PATH_STAGING}/${INST64_PKG_MAIN}" \
    "${INST64_OPT_ROOT}"
}

function inst64_lib_web_get_file() {
  bl64_dbg_app_show_function
  bl64_check_parameter 'INST64_WEB_REPO_URL' &&
    bl64_check_parameter 'INST64_PKG_MAIN' || return $?
  bl64_rxtx_web_get_file \
    "${INST64_WEB_REPO_URL}/${INST64_WEB_REPO_PATH}${INST64_WEB_REPO_PATH:+/}${INST64_PKG_MAIN}" \
    "${INST64_WORK_PATH_STAGING}/${INST64_PKG_MAIN}" \
    'YES' \
    "$INST64_CLI_MODE"
}

function inst64_lib_pkg_install() {
  bl64_dbg_app_show_function
  # shellcheck disable=SC2086
  if bl64_lib_flag_is_enabled "$INST64_REFRESH_PACKAGE_MANAGER"; then
    bl64_pkg_deploy $INST64_PKG_MAIN
  else
    bl64_pkg_install $INST64_PKG_MAIN
  fi
}

function inst64_lib_pkg_repo_add() {
  bl64_dbg_app_show_function
  local repository_url="${1:-}"
  local repository_key="${2:-}"
  local repository_apt_suite="${3:-}"
  local repository_apt_component="${4:-}"

  bl64_msg_show_task 'Add external package repository'
  bl64_pkg_repository_add "$INST64_OS_REPO_NAME" \
    "$repository_url" "$repository_key" \
    "$repository_apt_suite" "$repository_apt_component" ||
    return $?

  if ! bl64_lib_flag_is_enabled "$INST64_REFRESH_PACKAGE_MANAGER"; then
    bl64_pkg_prepare
  fi
}
