#!/usr/bin/env bash
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# shellcheck disable=SC2034
{

  #
  # Global parameters
  #

  # Enable debugging? Set to YES to enable
  declare INST64_DEBUG="${INST64_DEBUG:-}"
  # Base path for local applications
  declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
  # Local applications binaries location
  declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
  # User applications binaries location
  declare INST64_USER_BIN="${INST64_USER_BIN:-${HOME}/.local/bin}"
  # Location for temporary files
  declare INST64_TMP="${INST64_TMP:-/tmp}"
  # Base path for 3rd party applications
  declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
  # Install system wide? Requires root privilege
  declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"
  # Replace if already installed?
  declare INST64_REPLACE_INSTALLED="${INST64_REPLACE_INSTALLED:-NO}"

  #
  # Global definitions
  #

  # Inst64 Library version
  declare INST64_LIB_VERSION_BL64='1.0.0'

  # User wide home path
  declare INST64_HOME="${HOME}/at64"

  # App information
  declare INST64_APP_NAME=''
  declare INST64_APP_ID=''
  declare INST64_APP_FULL_NAME=''

  #
  # Method definitions
  #

  # Target ownership
  declare INST64_TARGET_DEFAULT=''
  declare INST64_TARGET_OWNER="$BL64_IAM_SYSTEM_USER"
  declare INST64_TARGET_GROUP="$BL64_IAM_SYSTEM_GROUP"
  declare INST64_TARGET_MODE='0755'
  declare INST64_CLI_MODE='0755'

  # Install progress status
  declare INST64_STATUS_FLAG='CONTINUE'
  declare INST64_STATUS_PATH=''

  # Work paths
  declare INST64_WORK_PATH_CLI=''
  declare INST64_WORK_PATH_SOURCE=''
  declare INST64_WORK_PATH_STAGING=''

  # Application packages
  declare INST64_PKG_MAIN=''
  declare INST64_PKG_MAIN_PREFIX=''
  declare INST64_PKG_MAIN_SUFFIX=''
  declare INST64_PKG_PRE=''
  declare INST64_PKG_POST=''
  declare INST64_PKG_DEV=''

  # CPU Architecture definitions
  declare INST64_CPU_DARWIN_ARM64=''
  declare INST64_CPU_LINUX_AMD64=''
  declare INST64_CPU_LINUX_AMD64_GNU=''
  declare INST64_CPU_LINUX_AMD64_MUSL=''
  declare INST64_CPU_LINUX_ARM64=''
  declare INST64_CPU_ALL_ALL='ALL'

  # Custom application installer
  declare INST64_APP_INSTALLER=''

  # CLI information
  declare INST64_CLI_NAME=''
  declare INST64_CLI_PATH=''

  # GitHub repository information
  declare INST64_GH_REPO_OWNER=''
  declare INST64_GH_REPO_NAME=''

  # Generic Git repository information
  declare INST64_GIT_SERVER=''
  declare INST64_GIT_REPO=''
  declare INST64_GIT_BRANCH=''

  # Generic Web repository information
  declare INST64_WEB_REPO_URL=''
  declare INST64_WEB_REPO_PATH=''

  # OS package manager information
  declare INST64_OS_REPO_NAME=''
}

#
# Functions
#

#######################################
# Sets the default value for INST64_SYSTEM_WIDE.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_base_set_system_wide() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d '/opt/bl64' || -d '/opt/inst64' ]] && INST64_SYSTEM_WIDE='YES' || INST64_SYSTEM_WIDE='NO'
  fi
}

#######################################
# Sets the base installation path (INST64_OPT_ROOT).
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_base_set_path() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      INST64_OPT_ROOT='/opt'
    else
      INST64_OPT_ROOT="$INST64_HOME"
    fi
  fi
}

#######################################
# Sets the application-specific target installation path.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_target_set_path() {
  bl64_dbg_app_show_function
  local target="INST64_${INST64_APP_ID}_TARGET"
  local target_basename="$INST64_APP_NAME"
  [[ -n "$INST64_TARGET_DEFAULT" ]] && target_basename="$INST64_TARGET_DEFAULT"
  if [[ -z "${!target}" ]]; then
    printf \
      -v "INST64_${INST64_APP_ID}_TARGET" \
      '%s/%s' \
      "${INST64_OPT_ROOT}" \
      "${target_basename}"
  fi
}

#######################################
# Sets target ownership and permissions based on INST64_SYSTEM_WIDE.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_target_set_owner() {
  bl64_dbg_app_show_function
  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    INST64_TARGET_OWNER="$BL64_IAM_SYSTEM_USER"
    INST64_TARGET_GROUP="$BL64_IAM_SYSTEM_GROUP"
  else
    INST64_TARGET_OWNER="$BL64_VAR_DEFAULT"
    INST64_TARGET_GROUP="$BL64_VAR_DEFAULT"
  fi
}

#######################################
# Sets the default path for CLI symlinks (INST64_CLI_PATH).
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_cli_set_path() {
  bl64_dbg_app_show_function
  local method="INST64_${INST64_APP_ID}_METHOD"

  [[ -n "$INST64_CLI_PATH" ]] && return 0
  if [[ "${!method}" == 'PIPX' ]]; then
    INST64_CLI_PATH="${HOME}/.local/bin"
  elif [[ "${!method}" == 'PIP' ]]; then
    INST64_CLI_PATH="${BL64_PY_PATH_PIP_USR_BIN}"
  elif [[ "${!method}" == 'BINARY' || "${!method}" == 'CUSTOM' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      INST64_CLI_PATH="${INST64_LOCAL_BIN}"
    else
      INST64_CLI_PATH="${INST64_USER_BIN}"
    fi
  fi
}

#######################################
# Validates the installation method for the current application.
#
# Arguments:
#   $1..$n: List of valid installation methods.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_app_check_method() {
  bl64_dbg_app_show_function "$@"
  local requested="INST64_${INST64_APP_ID}_METHOD"
  bl64_fmt_list_check_membership \
    "invalid installation method for the parameter INST64_${INST64_APP_ID}_METHOD" \
    "${!requested}" \
    "$@"
}

#######################################
# Checks if the application is already installed at the current version.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_app_check_installed() {
  bl64_dbg_app_show_function
  local app_target="INST64_${INST64_APP_ID}_TARGET"
  local app_version="INST64_${INST64_APP_ID}_VERSION"
  INST64_STATUS_PATH="${!app_target}/.${BL64_SCRIPT_NAME}"
  if [[ -f "$INST64_STATUS_PATH" ]]; then
    if [[ "${!app_version}" == "$(<"$INST64_STATUS_PATH")" ]]; then
      if ! bl64_lib_flag_is_enabled "$INST64_REPLACE_INSTALLED"; then
        bl64_msg_show_warning "application already installed. No further action taken. Set INST64_REPLACE_INSTALLED='YES' if replacement is required (current-version: ${!app_version})"
        INST64_STATUS_FLAG='SKIP'
        return 0
      fi
    fi
  fi
  bl64_dbg_app_show_comments 'use return-1 to inform that the application is not installed'
  return 1
}

#######################################
# Displays key installation parameters for the current application.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_message_show_parameters() {
  bl64_dbg_app_show_function
  local parameter_list=''
  local method_variable_suffix=''
  local var_suffix=''
  local var_name=''

  method_variable_suffix+=" ${INST64_APP_ID}_METHOD"
  method_variable_suffix+=" ${INST64_APP_ID}_PLATFORM"
  method_variable_suffix+=" ${INST64_APP_ID}_TARGET"
  method_variable_suffix+=" ${INST64_APP_ID}_VERSION"
  method_variable_suffix+=" SYSTEM_WIDE"
  method_variable_suffix+=" CLI_NAME"
  method_variable_suffix+=" CLI_PATH"
  method_variable_suffix+=" GH_REPO_NAME"
  method_variable_suffix+=" GH_REPO_OWNER"
  method_variable_suffix+=" PKG_MAIN"
  method_variable_suffix+=" PKG_DEV"
  method_variable_suffix+=" GIT_BRANCH"
  method_variable_suffix+=" GIT_REPO"
  method_variable_suffix+=" GIT_SERVER"
  method_variable_suffix+=" OS_REPO_NAME"
  method_variable_suffix+=" WEB_REPO_PATH"
  method_variable_suffix+=" WEB_REPO_URL"

  for var_suffix in $method_variable_suffix; do
    var_name="INST64_${var_suffix}"
    if [[ -n "${!var_name}" ]]; then
      parameter_list+=" ${var_name}"
    fi
  done

  # shellcheck disable=SC2086
  bl64_msg_show_setup \
    "Install application: ${INST64_APP_FULL_NAME}" \
    $parameter_list
}

#######################################
# Creates base installation directories if not system-wide.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_base_create_path() {
  bl64_dbg_app_show_function
  if ! bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_bsh_xdg_create "$HOME" &&
      bl64_fs_dir_create "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
        "$INST64_OPT_ROOT"
  fi
}

#######################################
# Shows an error message for unsupported OS/Machine combinations.
#
# Arguments:
#   None.
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_alert_incompatible_platform() {
  bl64_dbg_app_show_function
  bl64_msg_show_error "unsupported OS and Machine combination (OS_TYPE:${BL64_OS_TYPE} / MACHINE: ${BL64_OS_MACHINE})"
  return $BL64_LIB_ERROR_OS_INCOMPATIBLE
}

#######################################
# Register current app version.
#
# * Optional function used mainly by BINARY installation methods
# * Used to register the current application version in the status file
#
# Arguments:
#   $1: Application version
# Outputs:
#   Errors
# Returns:
#   0: success
#   >0: error
#######################################
function inst64_lib_app_register_version() {
  bl64_dbg_app_show_function
  local version="INST64_${INST64_APP_ID}_VERSION"
  echo "${!version}" >"$INST64_STATUS_PATH"
}

function inst64_lib_base_initialize() {
  bl64_dbg_app_show_function
  bl64_msg_show_phase 'initialize installer'

  bl64_dbg_app_show_comments 'Set default value for INST64_CLI_NAME'
  INST64_WORK_PATH_SOURCE="$INST64_CLI_NAME"
  # shellcheck disable=SC2015
  inst64_lib_base_set_system_wide &&
    inst64_lib_base_set_path &&
    inst64_lib_target_set_owner &&
    inst64_lib_target_set_path &&
    return 0

  inst64_lib_message_show_error 'installer initialization failed'
  return $BL64_LIB_ERROR_TASK_FAILED
}

function inst64_lib_step_prepare() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'prepare deployment'
  return 0
}

function inst64_lib_step_install() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'deploy application'
  return 0
}

function inst64_lib_step_setup() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'setup environment'
  bl64_check_parameter 'INST64_CLI_PATH' &&
    bl64_check_parameter 'INST64_CLI_NAME'
}

function inst64_lib_step_verify() {
  bl64_dbg_app_show_function
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 1
  bl64_msg_show_phase 'verify deployment'
  bl64_check_parameter 'INST64_CLI_PATH' &&
    bl64_check_parameter 'INST64_CLI_NAME'
}

function inst64_lib_task_binary_download() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'download application'
  INST64_WORK_PATH_STAGING="$(bl64_fs_create_tmpdir)"
}

function inst64_lib_task_deploy() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'deploy application'
  return 0
}

function inst64_lib_task_publish() {
  bl64_dbg_app_show_function
  bl64_msg_show_task "publish application to searchable path (${INST64_CLI_PATH})"
  return 0
}

function inst64_lib_task_binary_cleanup() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$INST64_WORK_PATH_STAGING"
  return 0
}

function inst64_lib_python_install_pip() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application'
  if [[ -n "$INST64_PKG_PRE" ]]; then
    # shellcheck disable=SC2086
    bl64_py_pip_usr_install $INST64_PKG_PRE ||
      return $?
  fi
  # shellcheck disable=SC2086
  bl64_fs_set_umask "$BL64_FS_UMASK_RW_USER_RO_ALL" &&
    bl64_py_pip_usr_deploy $INST64_PKG_MAIN ||
    return $?
  if [[ -n "$INST64_PKG_POST" ]]; then
    # shellcheck disable=SC2086
    bl64_py_pip_usr_install $INST64_PKG_POST ||
      return $?
  fi
  return 0
}

function inst64_lib_python_install_pipx() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application'
  if [[ -n "$INST64_PKG_PRE" ]]; then
    # shellcheck disable=SC2086
    inst64_lib_command_run_pipx install --preinstall $INST64_PKG_PRE $INST64_PKG_MAIN ||
      return $?
  else
    # shellcheck disable=SC2086
    inst64_lib_command_run_pipx install $INST64_PKG_MAIN $INST64_PKG_PRE ||
      return $?
  fi
  if [[ -n "$INST64_PKG_POST" ]]; then
    # shellcheck disable=SC2086
    inst64_lib_command_run_pipx inject $INST64_PKG_MAIN $INST64_PKG_POST ||
      return $?
  fi
  return 0
}

function inst64_lib_command_run_pipx() {
  bl64_dbg_app_show_function "$@"
  local verbose=''
  local command_pipx=''

  command_pipx="$(bl64_bsh_command_locate 'pipx' "$HOME/.local/bin")"
  [[ -z "$command_pipx" ]] &&
    bl64_msg_show_error 'pipx command not found. Please install pipx and try again' &&
    return 1

  bl64_msg_app_verbose_is_enabled && verbose='-v'
  bl64_dbg_app_trace_start
  # shellcheck disable=SC2086
  "$command_pipx" \
    $verbose \
    "$@"
  bl64_dbg_app_trace_stop
}

function inst64_lib_package_check_definition() {
  bl64_dbg_app_show_function
  [[ -n "$INST64_PKG_MAIN" ]] && return 0
  bl64_msg_show_error 'unable to determine application package name'
  return $BL64_LIB_ERROR_PARAMETER_MISSING
}

function inst64_lib_platform_check_cpu() {
  bl64_dbg_app_show_function
  local platform="INST64_${INST64_APP_ID}_PLATFORM"
  [[ -n "${!platform}" ]] && return 0
  inst64_lib_alert_incompatible_platform
}

function inst64_lib_app_check_mode_user() {
  bl64_dbg_app_show_function
  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_error 'system wide installation is not supported'
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi
  return 0
}

function inst64_lib_app_check_mode_system() {
  bl64_dbg_app_show_function
  if ! bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_error 'user wide installation is not supported'
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi
  return 0
}
