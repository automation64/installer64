#!/usr/bin/env bash
# Template: 2.3.0
# Snippet: install-external-package-3.4.1
# Snippet: install-github-release-3.4.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

declare INST64_GHCLI_PLATFORM="${INST64_GHCLI_PLATFORM:-}"
declare INST64_GHCLI_TARGET="${INST64_GHCLI_TARGET:-}"
declare INST64_GHCLI_VERSION="${INST64_GHCLI_VERSION:-latest}"
# Installation method
declare INST64_GHCLI_METHOD="${INST64_GHCLI_METHOD:-EXTERNAL}"
# Enable development packages?
declare INST64_GHCLI_DEVELOPMENT="${INST64_GHCLI_DEVELOPMENT:-$BL64_VAR_OFF}"

declare INST64_GHCLI_REPOSITORY_NAME='gh-cli'
declare INST64_GHCLI_SOURCE_APT='https://cli.github.com/packages'
declare INST64_GHCLI_REPOSITORY_KEY_APT='https://cli.github.com/packages/githubcli-archive-keyring.gpg'
declare INST64_GHCLI_SOURCE_YUM='https://cli.github.com/packages/rpm'
declare INST64_GHCLI_REPOSITORY_KEY_YUM='https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x23F3D4EA75716059'

declare INST64_GHCLI_REPO_NAME='cli'
declare INST64_GHCLI_REPO_OWNER='cli'

declare INST64_GHCLI_PACKAGES=''
declare INST64_GHCLI_CLI_NAME='gh'
declare INST64_GHCLI_CLI_PATH=''

#
# Functions
#

function inst64_ghcli_install_binary_release() {
  bl64_dbg_app_show_function
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner='root'
  local app_cli_mode='0755'
  local app_cli_source="${INST64_GHCLI_CLI_NAME}"
  local app_work_path="gh_${INST64_GHCLI_VERSION#v}_${INST64_GHCLI_PLATFORM}/bin/${app_cli_source}"

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    INST64_GHCLI_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_GHCLI_CLI_NAME}"
  else
    INST64_GHCLI_CLI_PATH="${INST64_GHCLI_TARGET}/${INST64_GHCLI_CLI_NAME}"
    app_target_owner="$BL64_VAR_DEFAULT"
  fi

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" || return $?
  bl64_rxtx_github_get_asset \
    "$INST64_GHCLI_REPO_OWNER" "$INST64_GHCLI_REPO_NAME" "$INST64_GHCLI_VERSION" "$INST64_GHCLI_PACKAGES" "${work_path}/${INST64_GHCLI_PACKAGES}" &&
    bl64_arc_open_tar "${work_path}/${INST64_GHCLI_PACKAGES}" "${work_path}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  bl64_fs_dir_create "$app_target_mode" "$app_target_owner" "$app_target_owner" "$INST64_GHCLI_TARGET" &&
    bl64_fs_path_copy "$app_cli_mode" "$BL64_VAR_DEFAULT" "$app_target_owner" "$app_target_owner" "$INST64_GHCLI_TARGET" "${work_path}/${app_work_path}" ||
    return $?

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_task "publish application to searchable path (${INST64_GHCLI_CLI_PATH})"
    # shellcheck disable=SC2086
    bl64_fs_symlink_create "${INST64_GHCLI_TARGET}/${app_cli_source}" "$INST64_GHCLI_CLI_PATH" "$BL64_VAR_ON" ||
      return $?
  fi

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

function inst64_ghcli_add_repository() {
  bl64_dbg_app_show_function
  local repository_url=''
  local repository_key=''
  local repository_extra_1=''
  local repository_extra_2=''

  if bl64_os_is_distro "${BL64_OS_OL}"; then
    repository_url="${INST64_GHCLI_SOURCE_YUM}"
    repository_key="$INST64_GHCLI_REPOSITORY_KEY_YUM"
  elif bl64_os_is_distro "${BL64_OS_UB}"; then
    repository_url="${INST64_GHCLI_SOURCE_APT}"
    repository_key="$INST64_GHCLI_REPOSITORY_KEY_APT"
    repository_extra_1='stable'
    repository_extra_2='main'
  fi

  bl64_msg_show_task 'Add external package repository'
  bl64_pkg_repository_add "$INST64_GHCLI_REPOSITORY_NAME" \
    "$repository_url" "$repository_key" \
    "$repository_extra_1" "$repository_extra_2"
}

function inst64_ghcli_install_external_packages() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'deploy packages'
  INST64_GHCLI_CLI_PATH="/usr/bin/${INST64_GHCLI_CLI_NAME}"
  # shellcheck disable=SC2086
  bl64_pkg_deploy $INST64_GHCLI_PACKAGES
}

#######################################
# Selects platform ID
#
# * Platform ID format is defined by the package provider
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Platform ID
# Returns:
#   0: selection completed ok
#   >0: unable to selection
#######################################
function inst64_ghcli_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_GHCLI_METHOD" == 'EXTERNAL' ]]; then
    [[ -z "$INST64_GHCLI_PLATFORM" ]] && INST64_GHCLI_PLATFORM='AUTO'
  elif [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    [[ -z "$INST64_GHCLI_PLATFORM" ]] && INST64_GHCLI_PLATFORM='linux_amd64'
  fi
  [[ -z "$INST64_GHCLI_PLATFORM" ]] && bl64_msg_show_error 'unable to determine platform id' && return 1
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_ghcli_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_GHCLI_METHOD" == 'EXTERNAL' ]]; then
    inst64_ghcli_install_external_packages
  elif [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    inst64_ghcli_install_binary_release
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_ghcli_select_packages() {
  bl64_dbg_app_show_function
  local package_prefix=''
  local package_sufix=''
  if [[ "$INST64_GHCLI_METHOD" == 'EXTERNAL' ]]; then
    if bl64_os_is_distro "$BL64_OS_OL" "$BL64_OS_UB"; then
      INST64_GHCLI_PACKAGES='gh'
      bl64_lib_flag_is_enabled "$INST64_GHCLI_DEVELOPMENT" &&
        INST64_GHCLI_PACKAGES="${INST64_GHCLI_PACKAGES}"
    fi
  elif [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_GHCLI_VERSION" == 'latest' ]]; then
      INST64_GHCLI_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_GHCLI_REPO_OWNER" "$INST64_GHCLI_REPO_NAME")" ||
        return $?
    fi
    package_prefix='gh_'
    package_sufix='.tar.gz'
    INST64_GHCLI_PACKAGES="${package_prefix}${INST64_GHCLI_VERSION#v}_${INST64_GHCLI_PLATFORM}${package_sufix}"
  fi
  [[ -z "$INST64_GHCLI_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_ghcli_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  if [[ "$INST64_GHCLI_METHOD" == 'EXTERNAL' ]]; then
    inst64_ghcli_add_repository &&
      inst64_ghcli_select_platform &&
      inst64_ghcli_select_packages &&
      bl64_pkg_setup
  elif [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    inst64_ghcli_select_platform &&
      inst64_ghcli_select_packages &&
      bl64_arc_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_ghcli_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_GHCLI_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_ghcli_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  INST64_GHCLI_TARGET="${INST64_GHCLI_TARGET:-${INST64_OPT_ROOT}/ghcli}"
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_GHCLI_METHOD' \
    "$INST64_GHCLI_METHOD" \
    'EXTERNAL' 'BINARY' ||
    return $?

  if [[ "$INST64_GHCLI_METHOD" == 'EXTERNAL' ]]; then
    bl64_check_privilege_root &&
      bl64_os_check_compatibility \
        "${BL64_OS_OL}-9" \
        "${BL64_OS_UB}-22" "${BL64_OS_UB}-23" "${BL64_OS_UB}-24"
  elif [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
  fi
  bl64_msg_show_setup 'Install application: GitHub' \
    'INST64_SYSDEN64_METHOD' 'INST64_SYSTEM_WIDE' 
}

#
# Main
#

bl64_lib_script_version_set '2.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_ghcli_initialize &&
  inst64_ghcli_prepare &&
  inst64_ghcli_install &&
  inst64_ghcli_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
