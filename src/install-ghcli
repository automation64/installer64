#!/usr/bin/env bash
# Template: install-bl64-binary-1.1.0
# Template: install-bl64-native-1.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
[[ ! -d "$INST64_BASHLIB64" && -d "${HOME}/at64" ]] && INST64_BASHLIB64="${HOME}/at64"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo "Fatal: unable to load BashLib64 libraries (${INST64_BASHLIB64})." && exit 1; }
# shellcheck source-path=src disable=SC2015
source "${BL64_SCRIPT_PATH}/lib-bl64" ||
  { echo "Fatal: unable to load Installer64 libraries (${BL64_SCRIPT_PATH}/lib-bl64)" && exit 1; }

#
# Globals
#

# Installation method
declare INST64_GHCLI_METHOD="${INST64_GHCLI_METHOD:-AUTO}"
# Installation destination
declare INST64_GHCLI_TARGET="${INST64_GHCLI_TARGET:-}"
# Hardware architecture
declare INST64_GHCLI_PLATFORM="${INST64_GHCLI_PLATFORM:-}"
# Application version
declare INST64_GHCLI_VERSION="${INST64_GHCLI_VERSION:-latest}"
# Enable development packages?
declare INST64_GHCLI_DEVELOPMENT="${INST64_GHCLI_DEVELOPMENT:-NO}"

INST64_APP_NAME='ghcli'
INST64_APP_ID='GHCLI'
INST64_APP_FULL_NAME='GitHub CLI'
INST64_CLI_NAME='gh'

INST64_GH_REPO_NAME='cli'
INST64_GH_REPO_OWNER='cli'
INST64_PKG_MAIN_PREFIX='gh_'
INST64_CPU_DARWIN_ARM64='macOS_amd64'
INST64_CPU_LINUX_AMD64='linux_amd64'

INST64_OS_REPO_NAME='gh-cli'
INST64_OS_SOURCE_YUM='https://cli.github.com/packages/rpm'
INST64_OS_SOURCE_APT='https://cli.github.com/packages'
INST64_OS_REPO_KEY_YUM='https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x23F3D4EA75716059'
INST64_OS_REPO_KEY_APT='https://cli.github.com/packages/githubcli-archive-keyring.gpg'

#
# Functions
#

function inst64_prepare_repository() {
  bl64_dbg_app_show_function
  local repository_url=''
  local repository_key=''
  local repository_apt_suite=''
  local repository_apt_component=''

  if bl64_os_is_flavor "$BL64_OS_FLAVOR_DEBIAN"; then
    repository_url="${INST64_OS_SOURCE_APT}"
    repository_key="$INST64_OS_REPO_KEY_APT"
    repository_apt_suite='stable'
    repository_apt_component='main'
  elif bl64_os_is_flavor "$BL64_OS_FLAVOR_FEDORA" || bl64_os_is_flavor "$BL64_OS_FLAVOR_REDHAT"; then
    repository_url="${INST64_OS_SOURCE_YUM}"
    repository_key="$INST64_OS_REPO_KEY_YUM"
  fi

  inst64_lib_pkg_repo_add \
    "$repository_url" "$repository_key" \
    "$repository_apt_suite" "$repository_apt_component"
}

function inst64_install_native() {
  bl64_dbg_app_show_function
  inst64_lib_pkg_install
}

function inst64_install_binary() {
  bl64_dbg_app_show_function

  INST64_WORK_PATH_SOURCE="gh_${INST64_GHCLI_VERSION#v}_${INST64_GHCLI_PLATFORM}/bin/${INST64_CLI_NAME}"
  inst64_lib_task_download
  inst64_lib_staging_create &&
    inst64_lib_gh_get_asset &&
    inst64_lib_staging_open_tar ||
    return $?

  inst64_lib_task_deploy
  inst64_lib_target_create &&
    inst64_lib_target_populate ||
    return $?

  inst64_lib_task_cleanup
  inst64_lib_staging_remove
}

function inst64_prepare() {
  bl64_dbg_app_show_function
  inst64_lib_step_prepare || return 0
  if [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    inst64_lib_base_create_path
  elif [[ "$INST64_GHCLI_METHOD" == 'NATIVE' ]]; then
    inst64_prepare_repository
  fi
}

function inst64_install() {
  bl64_dbg_app_show_function
  inst64_lib_step_install || return 0
  if [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    inst64_install_binary
  elif [[ "$INST64_GHCLI_METHOD" == 'NATIVE' ]]; then
    inst64_install_native
  fi
}

function inst64_setup() {
  bl64_dbg_app_show_function
  inst64_lib_step_setup || return 0
  if [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    inst64_lib_task_publish
    inst64_lib_cli_promote
  fi
}

function inst64_verify() {
  bl64_dbg_app_show_function
  inst64_lib_step_verify || return 0
  "${INST64_CLI_PATH}/${INST64_CLI_NAME}" --version || return $?
  if [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    inst64_lib_app_register_version
  fi
}

function inst64_select_method() {
  bl64_dbg_app_show_function
  inst64_lib_app_check_method \
    'AUTO' \
    'NATIVE' \
    'BINARY' ||
    return $?
  if [[ "$INST64_GHCLI_METHOD" == 'AUTO' ]]; then
    INST64_GHCLI_METHOD='BINARY'
  fi
}

function inst64_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    if [[ -z "$INST64_GHCLI_PLATFORM" ]]; then
      if [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_MACOS" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_ARM64" ]]; then
        INST64_GHCLI_PLATFORM="$INST64_CPU_DARWIN_ARM64"
      elif [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_LINUX" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_AMD64" ]]; then
        INST64_GHCLI_PLATFORM="$INST64_CPU_LINUX_AMD64"
      fi
    fi
    inst64_lib_platform_check_cpu
  fi
}

function inst64_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_GHCLI_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_GHCLI_VERSION" == 'latest' ]]; then
      INST64_GHCLI_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_GH_REPO_OWNER" "$INST64_GH_REPO_NAME")" ||
        return $?
    fi
    if [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_MACOS" ]]; then
      INST64_PKG_MAIN_SUFFIX='.zip'
    else
      INST64_PKG_MAIN_SUFFIX='.tar.gz'
    fi
    INST64_PKG_MAIN="${INST64_PKG_MAIN_PREFIX}${INST64_GHCLI_VERSION#v}_${INST64_GHCLI_PLATFORM}${INST64_PKG_MAIN_SUFFIX}"
  elif [[ "$INST64_GHCLI_METHOD" == 'NATIVE' ]]; then
    bl64_lib_flag_is_enabled "$INST64_GHCLI_DEVELOPMENT" &&
      INST64_PKG_DEV=''
    INST64_PKG_MAIN='gh'
    INST64_PKG_MAIN+=" ${INST64_PKG_DEV}"
  fi
  inst64_lib_package_check_definition
}

function inst64_initialize() {
  bl64_dbg_app_show_function
  inst64_lib_base_initialize &&
    inst64_select_method &&
    inst64_lib_method_initialize ||
    return $?

  if [[ "$INST64_GHCLI_METHOD" == 'NATIVE' ]]; then
    bl64_os_check_flavor \
        "$BL64_OS_FLAVOR_DEBIAN" \
        "$BL64_OS_FLAVOR_REDHAT" ||
      return $?
  fi

  inst64_select_platform &&
    inst64_select_packages &&
    inst64_lib_cli_set_path ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

bl64_lib_script_version_set '4.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_setup &&
  inst64_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
