#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# Installer64 / Package installer
#
# Author: Carola DemarÃ­a (https://github.com/carolademaria)
# Repository: https://github.com/automation64/installer64
# Version: 1.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
export INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
# Enable debugging? Set to YES to enable
export INST64_DEBUG="${INST64_DEBUG:-}"
# Installer64 location
export INST64_INSTALLER_ROOT="${INST64_INSTALLER_ROOT:-/opt/installer64}"
# Base path for local applications
export INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
export INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Base path for 3rd party applications
export INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
# Location for temporary files
export INST64_TMP="${INST64_TMP:-/tmp}"

# shellcheck source=SCRIPTDIR/../lib/bashlib64.bash
source "${INST64_BASHLIB64}/bashlib64.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

#
# Functions
#

function inst64_ghcli_install_rhel() {
  local repository_name='ghcli'
  local repository_url='https://cli.github.com/packages/rpm'
  local repository_key='https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x23F3D4EA75716059'
  local packages='gh'

  bl64_msg_show_task 'Add YUM package repository'
  bl64_pkg_repository_add "$repository_name" "$repository_url" "$repository_key" ||
    return $?

  bl64_msg_show_task 'deploy packages'
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

function inst64_ghcli_install_debian() {
  local repository_name='ghcli'
  local repository_url='https://cli.github.com/packages'
  local repository_key='https://cli.github.com/packages/githubcli-archive-keyring.gpg'
  local packages='gh'
  local suit='stable'
  local component='main'

  bl64_msg_show_task 'Add Debian package repository'
  bl64_pkg_repository_add "$repository_name" "$repository_url" "$repository_key" "$suit" "$component" ||
    return $?

  bl64_msg_show_task 'deploy packages'
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_ghcli_install() {
  bl64_dbg_app_show_function
  if bl64_os_match "${BL64_OS_OL}-9"; then
    inst64_ghcli_install_rhel
  elif bl64_os_match "${BL64_OS_UB}-22"; then
    inst64_ghcli_install_debian
  fi
  # shellcheck disable=SC2181
  (($? != 0)) && return 1

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_cleanup_full
  return 0
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function inst64_ghcli_initialize() {
  bl64_dbg_app_show_function
  bl64_os_check_version \
    "${BL64_OS_OL}-9" \
    "${BL64_OS_UB}-22" &&
    bl64_check_privilege_root &&
    bl64_pkg_setup
}

#
# Main
#

declare inst64_ghcli_installer_description='Install application: GitHub CLI'
declare -i inst64_ghcli_status=0

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_ghcli_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_ghcli_initialize &&
  inst64_ghcli_install
inst64_ghcli_status=$?

bl64_msg_show_batch_finish "$inst64_ghcli_status" "$inst64_ghcli_installer_description"
exit $inst64_ghcli_status
