#!/usr/bin/env bash
# Template: 2.0.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 1.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
export INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
# Enable debugging? Set to YES to enable
export INST64_DEBUG="${INST64_DEBUG:-}"
# Installer64 location
export INST64_INSTALLER_ROOT="${INST64_INSTALLER_ROOT:-/opt/installer64}"
# Base path for local applications
export INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
export INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Base path for 3rd party applications
export INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
# Location for temporary files
export INST64_TMP="${INST64_TMP:-/tmp}"

# shellcheck source=lib/bl64/bashlib64.bash
source "${INST64_BASHLIB64}/bashlib64.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Installation method
export INST64_KUBEPUG_METHOD="${INST64_KUBEPUG_METHOD:-KREW}"

export INST64_KUBEPUG_KREW_BIN="${HOME}/.krew/bin/kubectl-krew"
export INST64_KUBEPUG_K8S_KUBECONFIG="${INST64_KUBEPUG_K8S_KUBECONFIG:-$BL64_VAR_DEFAULT}"
export INST64_KUBEPUG_PACKAGES=''
export INST64_KUBEPUG_CLI_NAME='deprecations'


#
# Functions
#

function inst64_kubepug_install_krew_package() {
  bl64_dbg_app_show_function

  bl64_msg_show_task 'deploy application to local kubectl'
  # shellcheck disable=SC2086
  bl64_k8s_run_kubectl_plugin \
    "$INST64_KUBEPUG_K8S_KUBECONFIG" \
    krew install \
    $INST64_KUBEPUG_PACKAGES
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_kubepug_install() {
  bl64_dbg_app_show_function
  inst64_kubepug_select_packages || return $?
  if [[ "$INST64_KUBEPUG_METHOD" == 'KREW' ]]; then
    inst64_kubepug_install_krew_package
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_kubepug_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_KUBEPUG_METHOD" == 'KREW' ]]; then
    INST64_KUBEPUG_PACKAGES='deprecations'
  fi
  [[ -z "$INST64_KUBEPUG_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_kubepug_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  bl64_k8s_setup
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_kubepug_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  bl64_k8s_run_kubectl_plugin "$INST64_KUBEPUG_K8S_KUBECONFIG" \
    "$INST64_KUBEPUG_CLI_NAME" version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_kubepug_initialize() {
  bl64_dbg_app_show_function
  bl64_os_check_version \
    "${BL64_OS_OL}-9" &&
    bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_KUBEPUG_METHOD' \
      "$INST64_KUBEPUG_METHOD" \
      'KREW' &&
    bl64_check_privilege_not_root &&
    bl64_check_command "$INST64_KUBEPUG_KREW_BIN"
}

#
# Main
#

declare inst64_kubepug_installer_description='Install application: KubePug'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_kubepug_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_kubepug_initialize &&
  inst64_kubepug_prepare &&
  inst64_kubepug_install &&
  inst64_kubepug_verify
bl64_msg_show_batch_finish $? "$inst64_kubepug_installer_description"
