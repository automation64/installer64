#!/usr/bin/env bash
# Template: install-bl64-binary-1.1.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
[[ ! -d "$INST64_BASHLIB64" && -d "${HOME}/at64" ]] && INST64_BASHLIB64="${HOME}/at64"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo "Fatal: unable to load BashLib64 libraries (${INST64_BASHLIB64})." && exit 1; }
# shellcheck source-path=src disable=SC2015
source "${BL64_SCRIPT_PATH}/lib-bl64" ||
  { echo "Fatal: unable to load Installer64 libraries (${BL64_SCRIPT_PATH}/lib-bl64)" && exit 1; }

#
# Globals
#

# Installation method
declare INST64_LYNIS_METHOD="${INST64_LYNIS_METHOD:-CUSTOM}"
# Installation destination
declare INST64_LYNIS_TARGET="${INST64_LYNIS_TARGET:-}"
# Hardware architecture
declare INST64_LYNIS_PLATFORM="${INST64_LYNIS_PLATFORM:-}"
# Application version
declare INST64_LYNIS_VERSION="${INST64_LYNIS_VERSION:-latest}"

INST64_APP_NAME='lynis'
INST64_APP_ID='LYNIS'
INST64_APP_FULL_NAME='Lynis - Security Auditing Tool'
INST64_CLI_NAME='lynis'

INST64_GIT_SERVER='https://github.com/CISOfy'
INST64_GIT_REPO='lynis'
INST64_GIT_BRANCH='master'

#
# Functions
#

function inst64_install_binary() {
  bl64_dbg_app_show_function

  inst64_lib_task_binary_download &&
    inst64_lib_git_get_dir ||
    return $?

  inst64_lib_task_deploy
  inst64_lib_target_normalize &&
    inst64_lib_cli_normalize ||
    return $?

  inst64_lib_task_binary_cleanup
}

function inst64_prepare() {
  bl64_dbg_app_show_function
  inst64_lib_step_prepare || return 0
  if [[ "$INST64_LYNIS_METHOD" == 'CUSTOM' ]]; then
    inst64_lib_base_create_path
  fi
}

function inst64_install() {
  bl64_dbg_app_show_function
  inst64_lib_step_install || return 0
  if [[ "$INST64_LYNIS_METHOD" == 'CUSTOM' ]]; then
    inst64_install_binary
  fi
}

function inst64_setup() {
  bl64_dbg_app_show_function
  inst64_lib_step_setup || return 0
  if [[ "$INST64_LYNIS_METHOD" == 'CUSTOM' ]]; then
    INST64_WORK_PATH_CLI="${INST64_LYNIS_TARGET}/${INST64_CLI_NAME}"
    inst64_lib_task_publish
    # shellcheck disable=SC2086
    bl64_fs_symlink_create "${INST64_WORK_PATH_CLI}" "${INST64_CLI_PATH}/${INST64_CLI_NAME}" "$BL64_VAR_ON"
  fi
}

function inst64_verify() {
  bl64_dbg_app_show_function
  inst64_lib_step_verify || return 0
  cd "${INST64_LYNIS_TARGET}" &&
    "${INST64_CLI_PATH}/${INST64_CLI_NAME}" show version
}

function inst64_select_method() {
  bl64_dbg_app_show_function
  inst64_lib_app_check_method \
    'AUTO' \
    'CUSTOM' ||
    return $?
  if [[ "$INST64_LYNIS_METHOD" == 'AUTO' ]]; then
    INST64_LYNIS_METHOD='CUSTOM'
  fi
}

function inst64_select_platform() {
  bl64_dbg_app_show_function
  return 0
}

function inst64_select_packages() {
  bl64_dbg_app_show_function
  return 0
}

function inst64_initialize() {
  bl64_dbg_app_show_function
  inst64_lib_base_initialize &&
    inst64_select_method ||
    return $?

  if [[ "$INST64_LYNIS_METHOD" == 'CUSTOM' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_arc_setup ||
      return $?
  fi

  inst64_select_platform &&
    inst64_select_packages &&
    inst64_lib_cli_set_path ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

bl64_lib_script_version_set '2.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_setup &&
  inst64_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
