#!/usr/bin/env bash
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# Home root
declare INST64_HOME="${HOME}/at64"

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

# shellcheck disable=SC2034
declare INST64_BASHLIB64_SCRIPT_VERSION='1.1.3'
# Installation method
declare INST64_BASHLIB64_METHOD="${INST64_BASHLIB64_METHOD:-BINARY}"
# Source repository
declare INST64_BASHLIB64_SOURCE="${INST64_BASHLIB64_SOURCE:-https://github.com/automation64/bashlib64}"
# Target installation directory
declare INST64_BASHLIB64_TARGET="${INST64_BASHLIB64_TARGET:-}"
# Target application version
declare INST64_BASHLIB64_VERSION="${INST64_BASHLIB64_VERSION:-latest}"

declare INST64_BASHLIB64_PLATFORM=''
declare INST64_BASHLIB64_SYSTEM_USER=''
declare INST64_BASHLIB64_SYSTEM_GROUP=''
declare INST64_BASHLIB64_DOWNLOAD_TOOL='none'
declare INST64_BASHLIB64_GH_API='https://api.github.com/repos/automation64/bashlib64/releases/latest'
declare INST64_BASHLIB64_PACKAGES=''
declare INST64_BASHLIB64_TARGET_MODE_DIR='0755'
declare INST64_BASHLIB64_TARGET_MODE_FILE='0644'

#
# Functions
#

function inst64_bashlib64_identify_latest() {
  # shellcheck disable=SC2249
  case "$INST64_BASHLIB64_DOWNLOAD_TOOL" in
  'curl')
    "$INST64_BASHLIB64_DOWNLOAD_TOOL" \
      -s \
      "$INST64_BASHLIB64_GH_API" |
      grep '"tag_name":'
    ;;
  'wget')
    "$INST64_BASHLIB64_DOWNLOAD_TOOL" \
      -q -O- \
      "$INST64_BASHLIB64_GH_API" |
      grep '"tag_name":'
    ;;
  esac
}

function inst64_bashlib64_download_binary_package() {
  local package_name="$1"
  local package_url=''

  package_url="${INST64_BASHLIB64_SOURCE}/releases/download/${INST64_BASHLIB64_VERSION}/${package_name}"
  echo 'Task: download application'
  # shellcheck disable=SC2249
  case "$INST64_BASHLIB64_DOWNLOAD_TOOL" in
  'curl')
    "$INST64_BASHLIB64_DOWNLOAD_TOOL" \
      -s \
      -L \
      -o "${INST64_TMP}/${package_name}" \
      "$package_url"
    ;;
  'wget')
    "$INST64_BASHLIB64_DOWNLOAD_TOOL" \
      -q \
      -O "${INST64_TMP}/${package_name}" \
      "$package_url"
    ;;
  esac
}

function inst64_bashlib64_open_binary_package() {
  local package_name="$1"

  echo "Task: deploy application (package: ${package_name})"
  [[ -f "${INST64_TMP}/${package_name}" ]] &&
    tar zx -C "$INST64_BASHLIB64_TARGET" -f "${INST64_TMP}/${package_name}" &&
    chmod "$INST64_BASHLIB64_TARGET_MODE_FILE" "$INST64_BASHLIB64_TARGET"/* ||
    return $?
  if [[ "$EUID" == '0' ]]; then
    chown -R "${INST64_BASHLIB64_SYSTEM_USER}:${INST64_BASHLIB64_SYSTEM_GROUP}" "${INST64_BASHLIB64_TARGET}" ||
      return $?
  fi
  rm -f "${INST64_TMP}/${package_name}"
  return 0
}

function inst64_bashlib64_install_binary_release() {
  local package_name=''

  for package_name in $INST64_BASHLIB64_PACKAGES; do
    inst64_bashlib64_download_binary_package "$package_name" &&
      inst64_bashlib64_open_binary_package "$package_name" ||
      return $?
  done
}

#######################################
# Selects platform ID
#
# * Platform ID format is defined by the package provider
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Platform ID
# Returns:
#   0: selection completed ok
#   >0: unable to selection
#######################################
inst64_bashlib64_select_platform() {
  INST64_BASHLIB64_PLATFORM="$(uname -s)"
  [ -z "$INST64_BASHLIB64_PLATFORM" ] && echo 'Error: unable to determine platform id' && return 1
  if [ "$INST64_BASHLIB64_PLATFORM" != 'Darwin' ] && [ "$INST64_BASHLIB64_PLATFORM" != 'Linux' ]; then
    echo "Error: unsupported platform (${INST64_BASHLIB64_PLATFORM})"
    return 1
  fi
  if [[ "$INST64_BASHLIB64_PLATFORM" == 'Linux' ]]; then
    INST64_BASHLIB64_SYSTEM_USER='root'
    INST64_BASHLIB64_SYSTEM_GROUP='root'
  elif [[ "$INST64_BASHLIB64_PLATFORM" == 'Darwin' ]]; then
    INST64_BASHLIB64_SYSTEM_USER='root'
    INST64_BASHLIB64_SYSTEM_GROUP='wheel'
  fi
}

#######################################
# Install application packages
#
# Arguments:
#   None
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_bashlib64_install() {
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    inst64_bashlib64_install_binary_release
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_bashlib64_select_packages() {
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    INST64_BASHLIB64_PACKAGES='bashlib64-modular.tgz bashlib64-split.tgz bashlib64-stand-alone.tgz'
    if [[ "$INST64_BASHLIB64_VERSION" == 'latest' ]]; then
      INST64_BASHLIB64_VERSION="$(inst64_bashlib64_identify_latest)" &&
        INST64_BASHLIB64_VERSION="${INST64_BASHLIB64_VERSION##*:??}" &&
        INST64_BASHLIB64_VERSION="${INST64_BASHLIB64_VERSION%%?,*}"
    fi
  fi
  [[ -z "$INST64_BASHLIB64_VERSION" ]] && echo 'Error: unable to determine package version' && return 1
  [[ -z "$INST64_BASHLIB64_PACKAGES" ]] && echo 'Error: unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_bashlib64_prepare() {
  echo 'Task: prepare deployment'
  if [[ ! -d "$INST64_OPT_ROOT" ]]; then
    mkdir "$INST64_OPT_ROOT" &&
      chmod "$INST64_INSTALLER64_TARGET_MODE_DIR" "$INST64_OPT_ROOT" ||
      return $?
  fi
  if [[ ! -d "$INST64_BASHLIB64_TARGET" ]]; then
    mkdir -p "$INST64_BASHLIB64_TARGET" &&
      chmod "$INST64_BASHLIB64_TARGET_MODE_DIR" "$INST64_BASHLIB64_TARGET"
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_bashlib64_verify() {
  echo 'Task: verify deployment'
  [[ -f "${INST64_BASHLIB64_TARGET}/bashlib64.bash" ]]
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function inst64_bashlib64_initialize() {
  if [[ -z "$INST64_BASHLIB64_TARGET" ]]; then
    if [[ "$INST64_SYSTEM_WIDE" == 'YES' ]]; then
      INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
    else
      INST64_OPT_ROOT="${INST64_OPT_ROOT:-$INST64_HOME}"
    fi
    INST64_BASHLIB64_TARGET="${INST64_BASHLIB64_TARGET:-${INST64_OPT_ROOT}/bl64}"
  fi

  [[ "$INST64_BASHLIB64_METHOD" != 'BINARY' ]] &&
    echo 'Error: unsupported installation method' &&
    return 1

  if command -v 'curl' >/dev/null 2>&1; then
    INST64_BASHLIB64_DOWNLOAD_TOOL='curl'
  elif command -v 'wget' >/dev/null 2>&1; then
    INST64_BASHLIB64_DOWNLOAD_TOOL='wget'
  else
    echo 'Error: no download tool found (curl, wget)'
    return 1
  fi

  if ! command -v 'tar' >/dev/null 2>&1; then
    echo 'Error: no archive tool found (tar)'
    return 1
  fi
  inst64_bashlib64_select_platform &&
    inst64_bashlib64_select_packages ||
    return $?
  echo 'Install application: Bashlib64'
  echo "  INST64_SYSTEM_WIDE: ${INST64_SYSTEM_WIDE}"
  echo "  INST64_BASHLIB64_METHOD: ${INST64_BASHLIB64_METHOD}"
  echo "  INST64_BASHLIB64_PLATFORM: ${INST64_BASHLIB64_PLATFORM}"
  echo "  INST64_BASHLIB64_SOURCE: ${INST64_BASHLIB64_SOURCE}"
  echo "  INST64_BASHLIB64_TARGET: ${INST64_BASHLIB64_TARGET}"
  echo "  INST64_BASHLIB64_VERSION: ${INST64_BASHLIB64_VERSION}"
}

#
# Main
#

declare -i inst64_bashlib64_status=0

echo "Process: [${0}] started"

[[ -n "$INST64_DEBUG" ]] && set -x
inst64_bashlib64_initialize &&
  inst64_bashlib64_prepare &&
  inst64_bashlib64_install &&
  inst64_bashlib64_verify
inst64_bashlib64_status=$?

((inst64_bashlib64_status == 0)) &&
  echo "Process: [${0}] finished successfully" ||
  echo "Process: [${0}] finished with errors: exit-status-${inst64_bashlib64_status}"
# shellcheck disable=SC2086
exit $inst64_bashlib64_status
