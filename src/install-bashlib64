#!/usr/bin/env bash
# Template: install-bash-binary-1.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare INST64_LIB_PATH="${INST64_LIB_PATH:-/opt/inst64}"
[[ ! -d "$INST64_LIB_PATH" && -d "${HOME}/at64/inst64" ]] && INST64_LIB_PATH="${HOME}/at64/inst64"
# shellcheck source-path=src disable=SC2015
source "${INST64_LIB_PATH}/lib-bash" ||
  { echo 'Fatal: unable to load Installer64 libraries.' && exit 1; }

#
# Globals
#

# Installation method
declare INST64_BASHLIB64_METHOD="${INST64_BASHLIB64_METHOD:-BINARY}"
# Installation destination
declare INST64_BASHLIB64_TARGET="${INST64_BASHLIB64_TARGET:-}"
# Hardware architecture
declare INST64_BASHLIB64_PLATFORM="${INST64_BASHLIB64_PLATFORM:-}"
# Application version
declare INST64_BASHLIB64_VERSION="${INST64_BASHLIB64_VERSION:-latest}"

# App information
INST64_APP_NAME='bashlib64'
INST64_APP_ID='BASHLIB64'
INST64_APP_FULL_NAME='BashLib64 - Automation Library'
# shellcheck disable=SC2034
INST64_SCRIPT_VERSION='2.0.0'

INST64_GH_REPO_OWNER='automation64'
INST64_GH_REPO_NAME='bashlib64'
INST64_TARGET_DEFAULT='bl64'

#
# Functions
#

function inst64_install_binary_deploy() {
  local package_name="$1"
  inst64_lib_task_deploy
  inst64_lib_staging_create &&
    [[ -f "${INST64_WORK_PATH_STAGING}/${package_name}" ]] &&
    "$INST64_CMD_TAR" zx -C "$INST64_BASHLIB64_TARGET" -f "${INST64_WORK_PATH_STAGING}/${package_name}" &&
    "$INST64_CMD_CHMOD" "$INST64_TARGET_MODE_FILE" "$INST64_BASHLIB64_TARGET"/* ||
    return $?
  if [[ "$EUID" == '0' ]]; then
    "$INST64_CMD_CHOWN" -R "${INST64_TARGET_OWNER}:${INST64_TARGET_GROUP}" "${INST64_BASHLIB64_TARGET}" ||
      return $?
  fi
}

function inst64_install_binary() {
  local package_name=''
  inst64_lib_task_download || return $?
  for package_name in $INST64_PKG_MAIN; do
    inst64_lib_github_release_download "$package_name" &&
      inst64_install_binary_deploy "$package_name" ||
      return $?
  done
  inst64_lib_task_cleanup
  inst64_lib_staging_remove
}

function inst64_prepare() {
  inst64_lib_step_prepare || return 0
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    inst64_lib_base_create_path
    if [[ ! -d "$INST64_BASHLIB64_TARGET" ]]; then
      "$INST64_CMD_MKDIR" -p "$INST64_BASHLIB64_TARGET" &&
        "$INST64_CMD_CHMOD" "$INST64_TARGET_MODE_DIR" "$INST64_BASHLIB64_TARGET"
    fi
  fi
}

function inst64_install() {
  inst64_lib_step_install || return 0
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    inst64_install_binary
  fi
}

function inst64_setup() {
  inst64_lib_step_setup || return 0
}

function inst64_verify() {
  inst64_lib_step_verify || return 0
  [[ -d "${INST64_BASHLIB64_TARGET}" ]] &&
    [[ -f "${INST64_BASHLIB64_TARGET}/bashlib64.bash" ]] ||
    return $?
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    inst64_lib_app_register_version
  fi
}

function inst64_select_platform() {
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    if [[ -z "$INST64_BASHLIB64_PLATFORM" ]]; then
      INST64_BASHLIB64_PLATFORM="$INST64_CPU_ALL_ALL"
    fi
    inst64_lib_platform_check_cpu
  fi
}

function inst64_select_packages() {
  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_BASHLIB64_VERSION" == 'latest' ]]; then
      INST64_BASHLIB64_VERSION="$(inst64_lib_github_release_get_version)" ||
        return $?
    fi
    INST64_PKG_MAIN='bashlib64-modular.tgz bashlib64-split.tgz bashlib64-stand-alone.tgz'
  fi
  inst64_lib_package_check_definition
}

function inst64_initialize() {
  inst64_lib_base_initialize &&
    inst64_lib_app_check_method 'BINARY' ||
    return $?

  if [[ "$INST64_BASHLIB64_METHOD" == 'BINARY' ]]; then
    if inst64_lib_base_is_system_wide; then
      inst64_lib_check_privilege_root ||
        return $?
    fi
  fi

  inst64_select_platform &&
    inst64_select_packages ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

inst64_lib_task_process_start &&
  inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_setup &&
  inst64_verify
inst64_lib_task_process_finish $?
