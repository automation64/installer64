#!/usr/bin/env bash
# Template: install-bl64-custom-1.1.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
[[ ! -d "$INST64_BASHLIB64" && -d "${HOME}/at64" ]] && INST64_BASHLIB64="${HOME}/at64"
# shellcheck disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rnd.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-iam.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo "Fatal: unable to load BashLib64 libraries (${INST64_BASHLIB64})." && exit 1; }
source "${BL64_SCRIPT_PATH}/lib-bl64" ||
  { echo 'Fatal: unable to load Installer64 libraries.' && exit 1; }

#
# Globals
#

# Installation method
declare INST64_NODEJS_METHOD="${INST64_NODEJS_METHOD:-CUSTOM}"
# Installation destination
declare INST64_NODEJS_TARGET="${INST64_NODEJS_TARGET:-}"
# Hardware architecture
declare INST64_NODEJS_PLATFORM="${INST64_NODEJS_PLATFORM:-}"
# Application version
declare INST64_NODEJS_VERSION="${INST64_NODEJS_VERSION:-latest}"

# App information
INST64_APP_NAME='nodejs'
INST64_APP_ID='NODEJS'
INST64_APP_FULL_NAME='NodeJS'
# CLI information
INST64_CLI_NAME='node'
INST64_CLI_NAME_NPM='npm'
INST64_CLI_NAME_NPX='npx'

INST64_PKG_MAIN_PREFIX='node-'
INST64_PKG_MAIN_SUFFIX='.tar.gz'
INST64_WEB_REPO_URL='https://nodejs.org'
INST64_WEB_REPO_PATH='/dist'

#
# Functions
#

function inst64_select_packages_version() {
  bl64_dbg_app_show_function
  local package_version=''
  package_version="$(
    bl64_api_call \
      "$INST64_WEB_REPO_URL" \
      "$INST64_WEB_REPO_PATH" \
      "$BL64_API_METHOD_GET" |
      bl64_txt_run_grep "$BL64_TXT_SET_GREP_ONLY_MATCHING" "$BL64_TXT_SET_GREP_ERE" 'v[0-9]+\.[0-9]+\.[0-9]+/' |
      bl64_txt_run_sed 's|/||g' |
      bl64_txt_run_sort "$BL64_TXT_SET_SORT_NATURAL" |
      bl64_txt_run_tail "$BL64_TXT_SET_TAIL_LINES" 1
  )"
  if [[ -n "$package_version" ]]; then
    echo "$package_version"
  else
    bl64_msg_show_error "Unable to detect NodeJS version (${INST64_WEB_REPO_URL})"
    # shellcheck disable=SC2086
    return $BL64_LIB_ERROR_TASK_FAILED
  fi
}

function inst64_install_custom() {
  bl64_dbg_app_show_function
  inst64_lib_task_download
  inst64_lib_staging_create &&
    inst64_lib_web_get_file ||
    return $?

  inst64_lib_task_deploy
  inst64_lib_target_create &&
    bl64_arc_open_tar "${INST64_WORK_PATH_STAGING}/${INST64_PKG_MAIN}" "${INST64_NODEJS_TARGET}" ||
    return $?

  inst64_lib_task_cleanup
  inst64_lib_staging_remove
}

function inst64_prepare() {
  bl64_dbg_app_show_function
  inst64_lib_step_prepare || return 0
  if [[ "$INST64_NODEJS_METHOD" == 'CUSTOM' ]]; then
    inst64_lib_base_create_path
  fi
}

function inst64_install() {
  bl64_dbg_app_show_function
  inst64_lib_step_install || return 0
  if [[ "$INST64_NODEJS_METHOD" == 'CUSTOM' ]]; then
    inst64_install_custom
  fi
}

function inst64_setup() {
  bl64_dbg_app_show_function
  inst64_lib_step_setup || return 0
  if [[ "$INST64_NODEJS_METHOD" == 'CUSTOM' ]]; then
    INST64_CLI_TARGET="${INST64_NODEJS_TARGET}/${INST64_PKG_MAIN%.tar.gz}/bin"
    inst64_lib_task_publish
    # shellcheck disable=SC2086
    bl64_fs_symlink_create "${INST64_CLI_TARGET}/${INST64_CLI_NAME}" "${INST64_CLI_PATH}/${INST64_CLI_NAME}" "$BL64_VAR_ON" &&
      bl64_fs_symlink_create "${INST64_CLI_TARGET}/${INST64_CLI_NAME_NPM}" "${INST64_CLI_PATH}/${INST64_CLI_NAME_NPM}" "$BL64_VAR_ON" &&
      bl64_fs_symlink_create "${INST64_CLI_TARGET}/${INST64_CLI_NAME_NPX}" "${INST64_CLI_PATH}/${INST64_CLI_NAME_NPX}" "$BL64_VAR_ON"
  fi
}

function inst64_verify() {
  bl64_dbg_app_show_function
  inst64_lib_step_verify || return 0
  export PATH="${PATH}:${INST64_CLI_PATH}"
  "${INST64_CLI_PATH}/${INST64_CLI_NAME}" --version
}

function inst64_select_method() {
  bl64_dbg_app_show_function
  inst64_lib_app_check_method \
    'AUTO' \
    'CUSTOM' ||
    return $?
  if [[ "$INST64_NODEJS_METHOD" == 'AUTO' ]]; then
    INST64_NODEJS_METHOD='CUSTOM'
  fi
}

function inst64_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_NODEJS_METHOD" == 'CUSTOM' ]]; then
    if [[ -z "$INST64_NODEJS_PLATFORM" ]]; then
      if [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_MACOS" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_ARM64" ]]; then
        INST64_NODEJS_PLATFORM='darwin-arm64'
      elif [[ "$BL64_OS_TYPE" == "$BL64_OS_TYPE_LINUX" && "$BL64_OS_MACHINE" == "$BL64_OS_MACHINE_AMD64" ]]; then
        INST64_NODEJS_PLATFORM='linux-x64'
      fi
    fi
    inst64_lib_platform_check_cpu
  fi
  return 0
}

function inst64_select_packages() {
  bl64_dbg_app_show_function
  if [[ "$INST64_NODEJS_METHOD" == 'CUSTOM' ]]; then
    if [[ "$INST64_NODEJS_VERSION" == 'latest' ]]; then
      INST64_NODEJS_VERSION="$(inst64_select_packages_version)" ||
        return $?
    fi
    INST64_PKG_MAIN="${INST64_PKG_MAIN_PREFIX}${INST64_NODEJS_VERSION}-${INST64_NODEJS_PLATFORM}${INST64_PKG_MAIN_SUFFIX}"
    INST64_WEB_REPO_PATH+="/${INST64_NODEJS_VERSION}"
  fi
  inst64_lib_package_check_definition
}

function inst64_initialize() {
  bl64_dbg_app_show_function
  inst64_select_method &&
    inst64_lib_base_initialize ||
    return $?

  if [[ "$INST64_NODEJS_METHOD" == 'CUSTOM' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_os_check_flavor \
      "$BL64_OS_FLAVOR_DEBIAN" \
      "$BL64_OS_FLAVOR_FEDORA" \
      "$BL64_OS_FLAVOR_MACOS" \
      "$BL64_OS_FLAVOR_REDHAT" &&
      bl64_arc_setup ||
      return $?
  fi

  inst64_select_platform &&
    inst64_select_packages &&
    inst64_lib_cli_set_path ||
    return $?

  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

bl64_lib_script_version_set '2.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_initialize &&
  inst64_prepare &&
  inst64_install &&
  inst64_setup &&
  inst64_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
