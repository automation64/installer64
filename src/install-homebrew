#!/usr/bin/env bash
# Template: install-binary-bash-1.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare INST64_LIB_PATH="${INST64_LIB_PATH:-/opt/inst64}"
[[ ! -d "$INST64_LIB_PATH" && -d "${HOME}/at64/inst64" ]] && INST64_LIB_PATH="${HOME}/at64/inst64"
# shellcheck source-path=src disable=SC2015
source "${INST64_LIB_PATH}/lib-bash" ||
  { echo 'Fatal: unable to load Installer64 libraries.' && exit 1; }

#
# Globals
#

# Installation method
declare INST64_HOMEBREW_METHOD="${INST64_HOMEBREW_METHOD:-CUSTOM}"
# Installation destination
declare INST64_HOMEBREW_TARGET="${INST64_HOMEBREW_TARGET:-}"
# Hardware architecture
declare INST64_HOMEBREW_PLATFORM="${INST64_HOMEBREW_PLATFORM:-}"
# Application version
declare INST64_HOMEBREW_VERSION="${INST64_HOMEBREW_VERSION:-latest}"

# App information
INST64_APP_NAME='homebrew'
INST64_APP_ID='HOMEBREW'
INST64_APP_FULL_NAME='Homebrew'
# CLI information
INST64_CLI_NAME='brew'
INST64_CLI_PATH=''
# shellcheck disable=SC2034
INST64_SCRIPT_VERSION='2.0.0'

INST64_SYSTEM_WIDE='YES'

INST64_GH_REPO_OWNER='Homebrew'
INST64_GH_REPO_NAME='install'
INST64_APP_INSTALLER='install.sh'

#
# Functions
#

function inst64_homebrew_install_binary() {
  local installer_path=''
  inst64_lib_gh_asset_download "$INST64_APP_INSTALLER" || return $?

  inst64_lib_message_show_task "deploy application"
  installer_path="${INST64_TMP}/${INST64_APP_INSTALLER}"
  [[ -f "$installer_path" ]] &&
    chmod 755 "$installer_path" &&
    NONINTERACTIVE='YES' "$installer_path" ||
    return $?

  if [[ "$INST64_CPU_CURRENT" == 'Darwin' ]]; then
    INST64_CLI_PATH="/opt/homebrew/bin"
  elif [[ "$INST64_CPU_CURRENT" == 'Linux' ]]; then
    INST64_CLI_PATH="/home/linuxbrew/.linuxbrew/bin"
  fi

  rm -f "$installer_path"
  return 0
}

function inst64_homebrew_prepare() {
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 0
  inst64_lib_message_show_task 'prepare deployment'
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    :
  fi
}

function inst64_homebrew_install() {
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 0
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    inst64_homebrew_install_binary
  fi
}

function inst64_homebrew_verify() {
  [[ "$INST64_STATUS_FLAG" == 'SKIP' ]] && return 0
  inst64_lib_message_show_task 'verify deployment'
  "${INST64_CLI_PATH}/${INST64_CLI_NAME}" --version
}

inst64_homebrew_select_platform() {
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    if [[ -z "$INST64_HOMEBREW_PLATFORM" ]]; then
      INST64_HOMEBREW_PLATFORM="$INST64_CPU_ALL_ALL"
    fi
  fi
  [[ -z "$INST64_HOMEBREW_PLATFORM" ]] && bl64_msg_show_error 'unable to determine platform id' && return 1
  return 0
}

function inst64_homebrew_select_packages() {
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    INST64_PKG_MAIN='none'
  fi
  [[ -z "$INST64_HOMEBREW_VERSION" ]] && echo 'Error: unable to determine package version' && return 1
  [[ -z "$INST64_PKG_MAIN" ]] && echo 'Error: unable to determine package name' && return 1
  return 0
}

function inst64_homebrew_initialize() {
  inst64_lib_app_check_method 'CUSTOM' ||
    return $?

  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    if inst64_lib_base_is_system_wide; then
      inst64_lib_check_privilege_root ||
        return $?
    fi
    if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
      inst64_lib_check_os_incompatibility 'ALPINE' ||
        return $?
    fi
  fi

  inst64_homebrew_select_platform &&
    inst64_homebrew_select_packages ||
    return $?
  inst64_lib_app_check_installed && return 0
  inst64_lib_message_show_parameters
}

#
# Main
#

declare -i inst64_script_status=0

inst64_lib_message_show_process "[${0}] started"

[[ -n "$INST64_DEBUG" ]] && set -x
inst64_homebrew_initialize &&
  inst64_homebrew_prepare &&
  inst64_homebrew_install &&
  inst64_homebrew_verify
inst64_script_status=$?

((inst64_script_status == 0)) &&
  inst64_lib_message_show_process "[${0}] finished successfully" ||
  inst64_lib_message_show_process "[${0}] finished with errors: exit-status-${inst64_script_status}"
# shellcheck disable=SC2086
exit $inst64_script_status
