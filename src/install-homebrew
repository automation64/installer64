#!/usr/bin/env bash
# Template: 1.3.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"

declare INST64_HOMEBREW_PLATFORM=''
declare INST64_HOMEBREW_SOURCE="${INST64_HOMEBREW_SOURCE:-https://raw.githubusercontent.com/Homebrew/install}"

# shellcheck disable=SC2034
declare INST64_HOMEBREW_SCRIPT_VERSION='1.0.0'
# Installation method
declare INST64_HOMEBREW_METHOD="${INST64_HOMEBREW_METHOD:-CUSTOM}"

declare INST64_HOMEBREW_PACKAGES='install.sh'
declare INST64_HOMEBREW_PACKAGE_URL=''
declare INST64_HOMEBREW_INSTALLER='install.sh'
declare INST64_HOMEBREW_CLI_NAME='brew'
declare INST64_HOMEBREW_CLI_PATH=''

declare INST64_HOMEBREW_DOWNLOAD_TOOL='none'
declare INST64_HOMEBREW_OS=''

#
# Functions
#

function inst64_homebrew_os_detect() {
  if [[ -f '/etc/alpine-release' ]]; then
    INST64_HOMEBREW_OS='ALP'
  fi
}

function inst64_homebrew_download_custom_package() {
  echo "Task: download application (${INST64_HOMEBREW_PACKAGES})"
  # shellcheck disable=SC2249
  case "$INST64_HOMEBREW_DOWNLOAD_TOOL" in
  'curl')
    "$INST64_HOMEBREW_DOWNLOAD_TOOL" \
      -s \
      -L \
      -o "$INST64_HOMEBREW_INSTALLER" \
      "$INST64_HOMEBREW_PACKAGE_URL"
    ;;
  'wget')
    "$INST64_HOMEBREW_DOWNLOAD_TOOL" \
      -q \
      -O "$INST64_HOMEBREW_INSTALLER" \
      "$INST64_HOMEBREW_PACKAGE_URL"
    ;;
  esac
  [[ -f "$INST64_HOMEBREW_INSTALLER" ]] &&
    chmod 755 "$INST64_HOMEBREW_INSTALLER"
}

function inst64_homebrew_install_custom_package() {
  echo 'Task: install packages'
  if [[ "$INST64_HOMEBREW_PLATFORM" == 'Darwin' ]]; then
    INST64_HOMEBREW_CLI_PATH="/opt/homebrew/bin/${INST64_HOMEBREW_CLI_NAME}"
  elif [[ "$INST64_HOMEBREW_PLATFORM" == 'Linux' ]]; then
    INST64_HOMEBREW_CLI_PATH="/home/linuxbrew/.linuxbrew/bin/${INST64_HOMEBREW_CLI_NAME}"
  else
    "Error: unsupported platform (${INST64_HOMEBREW_PLATFORM})"
    return 1
  fi
  inst64_homebrew_download_custom_package &&
    NONINTERACTIVE='YES' "$INST64_HOMEBREW_INSTALLER"
}

#######################################
# Selects platform ID
#
# * Platform ID format is defined by the package provider
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Platform ID
# Returns:
#   0: selection completed ok
#   >0: unable to selection
#######################################
function inst64_homebrew_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    INST64_HOMEBREW_PLATFORM="$(uname -s)"
  fi
  [[ -z "$INST64_HOMEBREW_PLATFORM" ]] && echo 'Error: unable to determine platform id' && return 1
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_homebrew_install() {
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    inst64_homebrew_install_custom_package
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_homebrew_select_packages() {
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    INST64_HOMEBREW_PACKAGE_URL="${INST64_HOMEBREW_SOURCE}/HEAD/${INST64_HOMEBREW_PACKAGES}"
    INST64_HOMEBREW_INSTALLER="${INST64_TMP}/${INST64_HOMEBREW_INSTALLER}"
  fi
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_homebrew_prepare() {
  echo 'Task: prepare deployment'
  if [[ "$INST64_HOMEBREW_METHOD" == 'CUSTOM' ]]; then
    INST64_TMP="${INST64_TMP}/inst64-homebrew-installer"
    [[ -d "$INST64_TMP" ]] && rm -Rf "$INST64_TMP"
    mkdir "$INST64_TMP" ||
      return $?
  fi
  inst64_homebrew_select_platform &&
    inst64_homebrew_select_packages
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_homebrew_verify() {
  echo 'Task: verify deployment'
  "$INST64_HOMEBREW_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function inst64_homebrew_initialize() {
  inst64_homebrew_os_detect
  [[ "$INST64_HOMEBREW_OS" == 'ALP' ]] &&
    echo "Error: unsupported OS (${INST64_HOMEBREW_OS})" &&
    return 1

  [[ "$INST64_HOMEBREW_METHOD" != 'CUSTOM' ]] &&
    echo 'Error: unsupported installation method' &&
    return 1

  if command -v 'curl' >/dev/null 2>&1; then
    INST64_HOMEBREW_DOWNLOAD_TOOL='curl'
  elif command -v 'wget' >/dev/null 2>&1; then
    INST64_HOMEBREW_DOWNLOAD_TOOL='wget'
  else
    echo 'Error: no download tool found (curl, wget)'
    return 1
  fi
  if [[ "$(id -u)" != 0 ]]; then
    echo 'Error: installer must be run with root privilege'
    return 1
  fi
}

#
# Main
#

declare inst64_homebrew_task_description='Install application: Homebrew'
declare -i inst64_homebrew_status=0

echo "Process: [${inst64_homebrew_task_description}] started"

[[ -n "$INST64_DEBUG" ]] && set -x
inst64_homebrew_initialize &&
  inst64_homebrew_prepare &&
  inst64_homebrew_install &&
  inst64_homebrew_verify
inst64_homebrew_status=$?

((inst64_homebrew_status == 0)) &&
  echo "Process: [${inst64_homebrew_task_description}] finished successfully" ||
  echo "Process: [${inst64_homebrew_task_description}] finished with errors: exit-status-${inst64_homebrew_status}"
# shellcheck disable=SC2086
exit $inst64_homebrew_status
