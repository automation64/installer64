#!/usr/bin/env bash
# Template: 2.2.0
# Snippet: install-external-package-3.3.0
# Snippet: install-web-tgz-3.1.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 2.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# BashLib64 location
export INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}"
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-cryp.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-pkg.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
export INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
export INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
export INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Base path for 3rd party applications
export INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"
# Location for temporary files
export INST64_TMP="${INST64_TMP:-/tmp}"

# Installation method
export INST64_TERRAFORM_METHOD="${INST64_TERRAFORM_METHOD:-BINARY}"
# Enable development packages?
export INST64_TERRAFORM_DEVELOPMENT="${INST64_TERRAFORM_DEVELOPMENT:-$BL64_VAR_OFF}"

export INST64_TERRAFORM_PLATFORM="${INST64_TERRAFORM_PLATFORM:-linux_amd64}"
export INST64_TERRAFORM_SOURCE="${INST64_TERRAFORM_SOURCE:-https://releases.hashicorp.com/terraform}"
export INST64_TERRAFORM_TARGET="${INST64_TERRAFORM_TARGET:-${INST64_OPT_ROOT}/terraform}"
export INST64_TERRAFORM_VERSION="${INST64_TERRAFORM_VERSION:-latest}"
# Install system wide? Requires root privilege
export INST64_TERRAFORM_SYSTEM_WIDE="${INST64_TERRAFORM_SYSTEM_WIDE:-YES}"

export INST64_TERRAFORM_REPO_NAME='terraform'
export INST64_TERRAFORM_REPO_OWNER='hashicorp'

export INST64_TERRAFORM_REPOSITORY_NAME='hashicorp'
export INST64_TERRAFORM_SOURCE_RHEL='https://rpm.releases.hashicorp.com/RHEL/$releasever/$basearch/stable'
export INST64_TERRAFORM_REPOSITORY_KEY_RHEL='https://rpm.releases.hashicorp.com/gpg'

export INST64_TERRAFORM_PACKAGE_URL=''
export INST64_TERRAFORM_INSTALLER=''

export INST64_TERRAFORM_PACKAGES=''
export INST64_TERRAFORM_CLI_NAME='terraform'
export INST64_TERRAFORM_CLI_PATH=''

#
# Functions
#

function inst64_terraform_install_custom_package() {
  bl64_dbg_app_show_function
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner='root'
  local app_cli_mode='0755'
  local app_cli_source="${INST64_TERRAFORM_CLI_NAME}"

  if bl64_lib_flag_is_enabled "$INST64_TERRAFORM_SYSTEM_WIDE"; then
    INST64_TERRAFORM_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_TERRAFORM_CLI_NAME}"
  else
    INST64_TERRAFORM_CLI_PATH="${INST64_TERRAFORM_TARGET}/${INST64_TERRAFORM_CLI_NAME}"
    app_target_owner="$BL64_VAR_DEFAULT"
  fi

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" &&
    bl64_rxtx_web_get_file \
      "${INST64_TERRAFORM_PACKAGE_URL}/${INST64_TERRAFORM_PACKAGES}" "${work_path}/${INST64_TERRAFORM_PACKAGES}" &&
    bl64_arc_open_zip "${work_path}/${INST64_TERRAFORM_PACKAGES}" "${work_path}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  bl64_fs_create_dir "$app_target_mode" "$app_target_owner" "$app_target_owner" "$INST64_TERRAFORM_TARGET" &&
    bl64_fs_copy_files \
      "$app_cli_mode" "$app_target_owner" "$app_target_owner" "$INST64_TERRAFORM_TARGET" "${work_path}/${app_cli_source}" ||
    return $?

  if bl64_lib_flag_is_enabled "$INST64_TERRAFORM_SYSTEM_WIDE"; then
    bl64_msg_show_task "publish application to searchable path (${INST64_TERRAFORM_CLI_PATH})"
    # shellcheck disable=SC2086
    bl64_fs_create_symlink "${INST64_TERRAFORM_TARGET}/${INST64_TERRAFORM_CLI_NAME}" "$INST64_TERRAFORM_CLI_PATH" "$BL64_VAR_ON" ||
      return $?
  fi

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

function inst64_terraform_add_repository() {
  bl64_dbg_app_show_function
  local repository_url=''
  local repository_key=''
  local repository_extra_1=''
  local repository_extra_2=''

  if bl64_os_match "${BL64_OS_OL}"; then
    repository_url="${INST64_TERRAFORM_SOURCE_RHEL}"
    repository_key="$INST64_TERRAFORM_REPOSITORY_KEY_RHEL"
  fi

  bl64_msg_show_task 'Add external package repository'
  bl64_pkg_repository_add "$INST64_TERRAFORM_REPOSITORY_NAME" \
    "$repository_url" "$repository_key" \
    "$repository_extra_1" "$repository_extra_2"
}

function inst64_terraform_install_external_packages() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'deploy packages'
  INST64_TERRAFORM_CLI_PATH="/usr/bin/${INST64_TERRAFORM_CLI_NAME}"
  # shellcheck disable=SC2086
  bl64_pkg_deploy $INST64_TERRAFORM_PACKAGES
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_terraform_install() {
  bl64_dbg_app_show_function
  inst64_terraform_select_packages || return $?
  if [[ "$INST64_TERRAFORM_METHOD" == 'EXTERNAL' ]]; then
    inst64_terraform_install_external_packages
  elif [[ "$INST64_TERRAFORM_METHOD" == 'BINARY' ]]; then
    inst64_terraform_install_custom_package
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_terraform_select_packages() {
  bl64_dbg_app_show_function
  local package_prefix=''
  local package_sufix=''
  if [[ "$INST64_TERRAFORM_METHOD" == 'EXTERNAL' ]]; then
    if bl64_os_match "${BL64_OS_OL}"; then
      INST64_TERRAFORM_PACKAGES='terraform'
    fi
  elif [[ "$INST64_TERRAFORM_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_TERRAFORM_VERSION" == 'latest' ]]; then
      INST64_TERRAFORM_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_TERRAFORM_REPO_OWNER" "$INST64_TERRAFORM_REPO_NAME")" ||
        return $?
    fi
    package_prefix='terraform_'
    package_sufix='.zip'
    INST64_TERRAFORM_PACKAGES="${package_prefix}${INST64_TERRAFORM_VERSION#v}_${INST64_TERRAFORM_PLATFORM}${package_sufix}"
    INST64_TERRAFORM_PACKAGE_URL="${INST64_TERRAFORM_SOURCE}/${INST64_TERRAFORM_VERSION#v}"
    [[ -z "$INST64_TERRAFORM_PACKAGE_URL" ]] && bl64_msg_show_error 'unable to determine package download URL' && return 1
  fi
  [[ -z "$INST64_TERRAFORM_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_terraform_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  if [[ "$INST64_TERRAFORM_METHOD" == 'EXTERNAL' ]]; then
    bl64_pkg_setup &&
      inst64_terraform_add_repository
  elif [[ "$INST64_TERRAFORM_METHOD" == 'BINARY' ]]; then
    bl64_arc_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_terraform_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_TERRAFORM_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_terraform_initialize() {
  bl64_dbg_app_show_function
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_TERRAFORM_METHOD' \
    "$INST64_TERRAFORM_METHOD" \
    'BINARY' \
    'EXTERNAL' ||
    return $?

  if [[ "$INST64_TERRAFORM_METHOD" == 'EXTERNAL' ]]; then
    bl64_check_privilege_root &&
      bl64_os_check_compatibility \
        "${BL64_OS_OL}-8" \
        "${BL64_OS_OL}-9"
  elif [[ "$INST64_TERRAFORM_METHOD" == 'BINARY' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_TERRAFORM_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
    bl64_os_check_compatibility \
      "${BL64_OS_ALP}" \
      "${BL64_OS_OL}" \
      "${BL64_OS_FD}" \
      "${BL64_OS_UB}"
  fi
}

#
# Main
#

declare inst64_terraform_installer_description='Install application: Terraform CLI'

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_terraform_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_terraform_initialize &&
  inst64_terraform_prepare &&
  inst64_terraform_install &&
  inst64_terraform_verify
bl64_msg_show_batch_finish $? "$inst64_terraform_installer_description"
