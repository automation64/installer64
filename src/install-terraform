#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# Installer64 / Package installer
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Contributors: Carola DemarÃ­a (https://github.com/carolademaria)
# Repository: https://github.com/automation64/installer64
# Version: 1.2.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Base Installer64 parameters
export INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64/bashlib64.bash}"
export INST64_DEBUG="${INST64_DEBUG:-}"
export INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
export INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
export INST64_OPT_ROOT="${INST64_OPT_ROOT:-/opt}"

# shellcheck source=SCRIPTDIR/../lib/bashlib64.bash
source "$INST64_BASHLIB64" || { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

bl64_dbg_app_show_comments 'set binary installer options. Not needed for package installer'
export INST64_TERRAFORM_PLATFORM="${INST64_TERRAFORM_PLATFORM:-linux_amd64}"
export INST64_TERRAFORM_SOURCE="${INST64_TERRAFORM_SOURCE:-https://releases.hashicorp.com/terraform}"
export INST64_TERRAFORM_TARGET="${INST64_TERRAFORM_TARGET:-${INST64_OPT_ROOT}/terraform}"
export INST64_TERRAFORM_VERSION="${INST64_TERRAFORM_VERSION:-1.5.7}"

#
# Functions
#

function inst64_terraform_install_rhel() {
  local repository_name='terraform'
  # shellcheck disable=SC2016
  local repository_url='https://rpm.releases.hashicorp.com/RHEL/$releasever/$basearch/stable'
  local repository_key='https://rpm.releases.hashicorp.com/gpg'
  local packages='terraform'

  bl64_msg_show_task 'Add YUM package repository'
  bl64_pkg_repository_add "$repository_name" "$repository_url" "$repository_key" ||
    return $?

  bl64_msg_show_task 'deploy packages'
  # shellcheck disable=SC2086
  bl64_pkg_deploy $packages
}

function inst64_terraform_install_binary() {
  bl64_dbg_app_show_function
  local package_prefix='terraform_'
  local package_sufix='.zip'
  local package_name="${package_prefix}${INST64_TERRAFORM_VERSION}_${INST64_TERRAFORM_PLATFORM}${package_sufix}"
  local package_url="${INST64_TERRAFORM_SOURCE}/${INST64_TERRAFORM_VERSION}"
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner='root'
  local app_cli_mode='0755'
  local app_cli='terraform'

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" || return $?
  bl64_rxtx_web_get_file "${package_url}/${package_name}" "${work_path}/${package_name}" &&
    bl64_arc_open_zip "${work_path}/${package_name}" "${work_path}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  bl64_fs_create_dir "$app_target_mode" "$app_target_owner" "$app_target_owner" "$INST64_TERRAFORM_TARGET" &&
    bl64_fs_copy_files "$app_cli_mode" "$app_target_owner" "$app_target_owner" "$INST64_TERRAFORM_TARGET" "${work_path}/${app_cli}" ||
    return $?

  bl64_msg_show_task "publish application to searchable path (${INST64_LOCAL_BIN})"
  # shellcheck disable=SC2086
  bl64_fs_run_ln $BL64_FS_SET_LN_SYMBOLIC "${INST64_TERRAFORM_TARGET}/${app_cli}" "${INST64_LOCAL_BIN}/${app_cli}" ||
    return $?

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_terraform_install() {
  bl64_dbg_app_show_function
  if bl64_os_match "${BL64_OS_OL}-8" "${BL64_OS_OL}-9"; then
    inst64_terraform_install_rhel
  elif bl64_os_match "${BL64_OS_ALP}-3"; then
    inst64_terraform_install_binary
  fi
  # shellcheck disable=SC2181
  (($? != 0)) && return 1

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_cleanup_full
  return 0
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function inst64_terraform_initialize() {
  bl64_dbg_app_show_function

  bl64_os_check_version \
    "${BL64_OS_ALP}-3" \
    "${BL64_OS_OL}-8" "${BL64_OS_OL}-9" &&
    bl64_check_privilege_root &&
    bl64_pkg_setup &&
    bl64_arc_setup
}

#
# Main
#

declare inst64_terraform_installer_description='Install application: Terraform'
declare -i inst64_terraform_status=0

bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_terraform_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_lib_enable
inst64_terraform_initialize &&
  inst64_terraform_install
inst64_terraform_status=$?

bl64_msg_show_batch_finish "$inst64_terraform_status" "$inst64_terraform_installer_description"
exit $inst64_terraform_status
