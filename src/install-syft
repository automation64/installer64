#!/usr/bin/env bash
# Template: 2.3.0
# Snippet: install-github-release-3.4.0
# Snippet: select-platform-1.0.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

declare INST64_SYFT_PLATFORM="${INST64_SYFT_PLATFORM:-}"
declare INST64_SYFT_TARGET="${INST64_SYFT_TARGET:-}"
declare INST64_SYFT_VERSION="${INST64_SYFT_VERSION:-latest}"
# Installation method
declare INST64_SYFT_METHOD="${INST64_SYFT_METHOD:-BINARY}"

declare INST64_SYFT_REPO_NAME='syft'
declare INST64_SYFT_REPO_OWNER='anchore'
declare INST64_SYFT_PACKAGES=''
declare INST64_SYFT_CLI_NAME='syft'
declare INST64_SYFT_CLI_PATH=''

#
# Functions
#

function inst64_syft_install_binary_release() {
  bl64_dbg_app_show_function
  local work_path=''
  local app_target_mode='0755'
  local app_target_owner='root'
  local app_cli_mode='0755'
  local app_cli_source="${INST64_SYFT_CLI_NAME}"
  local app_work_path="${app_cli_source}"

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    INST64_SYFT_CLI_PATH="${INST64_LOCAL_BIN}/${INST64_SYFT_CLI_NAME}"
  else
    INST64_SYFT_CLI_PATH="${INST64_SYFT_TARGET}/${INST64_SYFT_CLI_NAME}"
    app_target_owner="$BL64_VAR_DEFAULT"
  fi

  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" || return $?
  bl64_rxtx_github_get_asset \
    "$INST64_SYFT_REPO_OWNER" "$INST64_SYFT_REPO_NAME" "$INST64_SYFT_VERSION" "$INST64_SYFT_PACKAGES" "${work_path}/${INST64_SYFT_PACKAGES}" &&
    bl64_arc_open_tar "${work_path}/${INST64_SYFT_PACKAGES}" "${work_path}" ||
    return $?

  bl64_msg_show_task 'deploy application'
  bl64_fs_dir_create "$app_target_mode" "$app_target_owner" "$app_target_owner" "$INST64_SYFT_TARGET" &&
    bl64_fs_path_copy "$app_cli_mode" "$BL64_VAR_DEFAULT" "$app_target_owner" "$app_target_owner" "$INST64_SYFT_TARGET" "${work_path}/${app_work_path}" ||
    return $?

  if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
    bl64_msg_show_task "publish application to searchable path (${INST64_SYFT_CLI_PATH})"
    # shellcheck disable=SC2086
    bl64_fs_symlink_create "${INST64_SYFT_TARGET}/${app_cli_source}" "$INST64_SYFT_CLI_PATH" "$BL64_VAR_ON" ||
      return $?
  fi

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

#######################################
# Selects platform ID
#
# * Platform ID format is defined by the package provider
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Platform ID
# Returns:
#   0: selection completed ok
#   >0: unable to selection
#######################################
function inst64_syft_select_platform() {
  bl64_dbg_app_show_function
  if [[ "$INST64_SYFT_METHOD" == 'BINARY' ]]; then
    [[ -z "$INST64_SYFT_PLATFORM" ]] && INST64_SYFT_PLATFORM='linux_amd64'
  fi
  [[ -z "$INST64_SYFT_PLATFORM" ]] && bl64_msg_show_error 'unable to determine platform id' && return 1
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_syft_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_SYFT_METHOD" == 'BINARY' ]]; then
    inst64_syft_install_binary_release
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_syft_select_packages() {
  bl64_dbg_app_show_function
  local package_prefix=''
  local package_sufix=''
  if [[ "$INST64_SYFT_METHOD" == 'BINARY' ]]; then
    if [[ "$INST64_SYFT_VERSION" == 'latest' ]]; then
      INST64_SYFT_VERSION="$(bl64_vcs_github_release_get_latest "$INST64_SYFT_REPO_OWNER" "$INST64_SYFT_REPO_NAME")" ||
        return $?
    fi
    package_prefix='syft_'
    package_sufix='.tar.gz'
    INST64_SYFT_PACKAGES="${package_prefix}${INST64_SYFT_VERSION#v}_${INST64_SYFT_PLATFORM}${package_sufix}"
  fi
  [[ -z "$INST64_SYFT_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_syft_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  if [[ "$INST64_SYFT_METHOD" == 'BINARY' ]]; then
    inst64_syft_select_platform &&
      inst64_syft_select_packages &&
      bl64_arc_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_syft_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  "$INST64_SYFT_CLI_PATH" --version
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_syft_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    [[ -d "$INST64_HOME" ]] && INST64_SYSTEM_WIDE='NO' || INST64_SYSTEM_WIDE='YES'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  INST64_SYFT_TARGET="${INST64_SYFT_TARGET:-${INST64_OPT_ROOT}/syft}"
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_SYFT_METHOD' \
    "$INST64_SYFT_METHOD" \
    'BINARY' ||declare INST64_SYFT_TARGET="${INST64_SYFT_TARGET:-${INST64_OPT_ROOT}/syft}"

    return $?

  if [[ "$INST64_SYFT_METHOD" == 'BINARY' ]]; then
    if bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE"; then
      bl64_check_privilege_root ||
        return $?
    fi
  fi
}

#
# Main
#

declare inst64_syft_installer_description='Install application: Syft'

bl64_lib_script_version_set '1.0.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$inst64_syft_installer_description"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_syft_initialize &&
  inst64_syft_prepare &&
  inst64_syft_install &&
  inst64_syft_verify
bl64_msg_show_batch_finish $? "$inst64_syft_installer_description"
