#!/usr/bin/env bash
# Template: 2.3.0
# Snippet: install-custom-package-4.2.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Home root
declare INST64_HOME="${HOME}/at64"
# BashLib64 location
declare INST64_BASHLIB64="${INST64_BASHLIB64:-}"
[[ -d "$INST64_HOME" ]] && INST64_BASHLIB64="${INST64_BASHLIB64:-${INST64_HOME}/bl64}" || INST64_BASHLIB64="${INST64_BASHLIB64:-/opt/bl64}" 
# shellcheck source-path=lib/bl64 disable=SC2015
source "${INST64_BASHLIB64}/bashlib64-module-rxtx.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-xsv.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-api.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-vcs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-txt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fmt.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-fs.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-bsh.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-module-arc.bash" &&
  source "${INST64_BASHLIB64}/bashlib64-core.bash" ||
  { echo 'Error: BashLib64 not found. Please run the install-bashlib64 script and retry.' && exit 1; }

#
# Globals
#

# Enable debugging? Set to YES to enable
declare INST64_DEBUG="${INST64_DEBUG:-}"
# Base path for local applications
declare INST64_LOCAL_ROOT="${INST64_LOCAL_ROOT:-/usr/local}"
# Local applications binaries location
declare INST64_LOCAL_BIN="${INST64_LOCAL_BIN:-${INST64_LOCAL_ROOT}/bin}"
# Location for temporary files
declare INST64_TMP="${INST64_TMP:-/tmp}"
# Base path for 3rd party applications
declare INST64_OPT_ROOT="${INST64_OPT_ROOT:-}"
# Install system wide? Requires root privilege
declare INST64_SYSTEM_WIDE="${INST64_SYSTEM_WIDE:-}"

declare INST64_OHMYZSH_PLATFORM=''
declare INST64_OHMYZSH_SOURCE="${INST64_OHMYZSH_SOURCE:-https://raw.github.com/ohmyzsh/ohmyzsh/master/tools}"
declare INST64_OHMYZSH_TARGET="${INST64_OHMYZSH_TARGET:-}"
declare INST64_OHMYZSH_VERSION=''
# Installation method
declare INST64_OHMYZSH_METHOD="${INST64_OHMYZSH_METHOD:-CUSTOM}"

declare INST64_OHMYZSH_PACKAGE_URL=''
declare INST64_OHMYZSH_INSTALLER='install.sh'
declare INST64_OHMYZSH_PACKAGES=''
declare INST64_OHMYZSH_CLI_NAME='oh-my-zsh.sh'
declare INST64_OHMYZSH_CLI_PATH=''

#
# Functions
#

function inst64_ohmyzsh_install_custom_package() {
  bl64_dbg_app_show_function
  local work_path=''
  local app_target_mode='0755'

  INST64_OHMYZSH_CLI_PATH="${INST64_OHMYZSH_TARGET}/${INST64_OHMYZSH_CLI_NAME}"
  bl64_msg_show_task 'download application'
  work_path="$(bl64_fs_create_tmpdir)" &&
    bl64_rxtx_web_get_file \
      "${INST64_OHMYZSH_PACKAGE_URL}/${INST64_OHMYZSH_PACKAGES}" \
      "${work_path}/${INST64_OHMYZSH_PACKAGES}" \
      'YES' \
      "$app_target_mode" ||
    return $?

  bl64_msg_show_task 'deploy application'
  "${work_path}/${INST64_OHMYZSH_INSTALLER}" --unattended ||
    return $?

  bl64_msg_show_task 'cleanup temporary files'
  bl64_fs_rm_tmpdir "$work_path"
  return 0
}

#######################################
# Install application packages
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package installer progress and errors
# Returns:
#   0: package installed ok
#   >0: unable to install package
#######################################
function inst64_ohmyzsh_install() {
  bl64_dbg_app_show_function
  if [[ "$INST64_OHMYZSH_METHOD" == 'CUSTOM' ]]; then
    inst64_ohmyzsh_install_custom_package
  fi
}

#######################################
# Select installation packages and related information
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Package name list
# Returns:
#   0: selection ok
#   >0: selection failed
#######################################
function inst64_ohmyzsh_select_packages() {
  bl64_dbg_app_show_function
  local package_prefix=''
  local package_sufix=''
  if [[ "$INST64_OHMYZSH_METHOD" == 'CUSTOM' ]]; then
    package_prefix="$INST64_OHMYZSH_INSTALLER"
    package_sufix=''
    INST64_OHMYZSH_PACKAGES="${package_prefix}${package_sufix}"
    INST64_OHMYZSH_PACKAGE_URL="${INST64_OHMYZSH_SOURCE}"
    [[ -z "$INST64_OHMYZSH_PACKAGE_URL" ]] && bl64_msg_show_error 'unable to determine package download URL' && return 1
  fi
  [[ -z "$INST64_OHMYZSH_PACKAGES" ]] && bl64_msg_show_error 'unable to determine package name' && return 1
  return 0
}

#######################################
# Prepare installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Preparation progress and errors
# Returns:
#   0: preparation ok
#   >0: preparation failed
#######################################
function inst64_ohmyzsh_prepare() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'prepare deployment'
  inst64_ohmyzsh_select_packages ||
    return $?
  if [[ "$INST64_OHMYZSH_METHOD" == 'CUSTOM' ]]; then
    bl64_arc_setup
  fi
}

#######################################
# Verify installation
#
# Arguments:
#   None. Parameters are imported from Globals
# Outputs:
#   Verification progress and errors
# Returns:
#   0: verification ok
#   >0: verification failed
#######################################
function inst64_ohmyzsh_verify() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'verify deployment'
  [[ -f "$INST64_OHMYZSH_CLI_PATH" ]]
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: initialization failed
#######################################
function inst64_ohmyzsh_initialize() {
  bl64_dbg_app_show_function
  if [[ -z "$INST64_SYSTEM_WIDE" ]]; then
    INST64_SYSTEM_WIDE='NO'
  fi
  if [[ -z "$INST64_OPT_ROOT" ]]; then
    bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && INST64_OPT_ROOT='/opt' || INST64_OPT_ROOT="$INST64_HOME"
  fi
  INST64_OHMYZSH_TARGET="${INST64_OHMYZSH_TARGET:-${HOME}/.oh-my-zsh}"
  bl64_fmt_check_value_in_list 'invalid installation method for the parameter INST64_OHMYZSH_METHOD' \
    "$INST64_OHMYZSH_METHOD" \
    'CUSTOM' ||
    return $?

  bl64_lib_flag_is_enabled "$INST64_SYSTEM_WIDE" && bl64_msg_show_error 'system-wide installation not supported' \
    return $BL64_LIB_ERROR_PARAMETER_INVALID

  if [[ "$INST64_OHMYZSH_METHOD" == 'CUSTOM' ]]; then
    bl64_check_privilege_not_root &&
      bl64_check_command_search_path 'zsh'
  fi
  # shellcheck disable=SC2181
  (($? == 0)) && bl64_msg_show_setup 'Install application: Oh-My-ZSH' \
    'INST64_OHMYZSH_METHOD' 'INST64_SYSTEM_WIDE' 
}

#
# Main
#

bl64_lib_script_version_set '1.2.0'
bl64_msg_all_enable_verbose
bl64_msg_show_batch_start "$BL64_SCRIPT_ID"

[[ -n "$INST64_DEBUG" ]] && bl64_dbg_all_enable
inst64_ohmyzsh_initialize &&
  inst64_ohmyzsh_prepare &&
  inst64_ohmyzsh_install &&
  inst64_ohmyzsh_verify
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
